---
/*
  Props:
    - itemType: 'project' | 'stay'
    - itemId: string

  Usage:
    <SaveToList itemType="project" itemId="test-project-123" />
*/
const { itemType = 'project', itemId = '' } = Astro.props;
---
<div id={"save-root-" + itemId} data-item-id={itemId} data-item-type={itemType} style="display:none" aria-hidden="true" class="bg-white border border-gray-200 rounded-lg p-6 dark:bg-gray-800 dark:border-gray-700">
  <div class="mb-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Save</h3>
  </div>
  <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">Save this {itemType} to your personal lists to revisit later.</p>
  <!-- Primary save button styled to match booking cards (full-width, modern) -->
  <button
    id={"save-btn-" + itemId}
  class="w-full inline-flex items-center justify-center gap-2 bg-white border border-gray-200 text-gray-900 hover:bg-gray-50 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg px-4 py-3 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
  aria-expanded="false"
  aria-controls={"save-panel-" + itemId}
  type="button"
  title="Save to a list"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-pink-600" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
      <path d="M12 21s-7.5-4.35-10-7.25C-1 9.75 3 4 7 5.5 9 6.4 12 9 12 9s3-2.6 5-3.5c4-1.5 8 4.25 5 8.25-2.5 2.9-10 7.25-10 7.25z" />
    </svg>
    <span>Save</span>
  </button>

  <!-- Inline panel (simplified; no overlay or modal) -->
  <div id={"save-panel-" + itemId} class="hidden mt-3">
    <h3 id={"save-modal-title-" + itemId}>Save this {itemType}</h3>

    <div id={"lists-area-" + itemId} class="lists-area">Loading lists…</div>

    <form id={"create-form-" + itemId} class="create-form" style="margin-top: 12px; display: flex; gap: 8px;">
      <input id={"new-title-" + itemId} placeholder="New list title" />
      <button type="submit">Create</button>
    </form>

    <div id={"msg-" + itemId} class="msg" aria-live="polite" style="margin-top: 8px;"></div>
  </div>
</div>

<script type="module">
  import * as listsAPI from '/src/lib/lists';
  import { getCurrentUser } from '/src/lib/auth';

  async function initSave(root) {
  if (root?.dataset?.saveBound === '1') return; // prevent duplicate init in HMR
  root.dataset.saveBound = '1';
    // Auth gate: hide by default; only show for logged-in users
    try {
      const user = await getCurrentUser();
      if (!user) {
        // remain hidden for anonymous users (and wrapper stays hidden)
        return;
      }
      // Show entire Save box if wrapped, else just the component root
      const wrapper = root.closest('[data-save-wrapper]');
      if (wrapper) {
        wrapper.style.display = '';
        wrapper.removeAttribute('aria-hidden');
      }
      root.style.display = '';
      root.removeAttribute('aria-hidden');
    } catch (e) {
      // On error determining auth, keep hidden
      return;
    }
    const itemIdStr = root?.dataset?.itemId || '';
    const itemTypeStr = root?.dataset?.itemType || 'project';

    if (!itemIdStr) {
      const btn = root.querySelector('[id^="save-btn-"]');
      const listsArea = root.querySelector('[id^="lists-area-"]');
      const msgEl = root.querySelector('[id^="msg-"]');
      if (btn) {
        btn.setAttribute('disabled', 'true');
        btn.setAttribute('aria-disabled', 'true');
        btn.title = 'Save unavailable (missing item id)';
        btn.style.opacity = '0.6';
        btn.style.pointerEvents = 'none';
      }
      if (listsArea) listsArea.textContent = 'Save unavailable: missing item id.';
      if (msgEl) msgEl.textContent = '';
      return;
    }

  // Scope all lookups to this root to avoid duplicate-id collisions
  const btn = root.querySelector(`[id="save-btn-${itemIdStr}"]`);
  const panel = root.querySelector(`[id="save-panel-${itemIdStr}"]`);
  const listsArea = root.querySelector(`[id="lists-area-${itemIdStr}"]`);
  const msgEl = root.querySelector(`[id="msg-${itemIdStr}"]`);
  const createForm = root.querySelector(`[id="create-form-${itemIdStr}"]`);
  const newTitle = root.querySelector(`[id="new-title-${itemIdStr}"]`);

  try { console.debug('SaveToList init', { itemId: itemIdStr, type: itemTypeStr, foundBtn: !!btn, foundPanel: !!panel, root }); } catch(_) {}

    let lists = [];
    let savedSet = new Set();
    let loadingMap = {};

    function togglePanel(show) {
      if (!panel) return;
      const shouldShow = show ?? panel.classList.contains('hidden');
      if (shouldShow) {
        panel.classList.remove('hidden');
        if (btn) btn.setAttribute('aria-expanded', 'true');
      } else {
        panel.classList.add('hidden');
        if (btn) btn.setAttribute('aria-expanded', 'false');
        showMessage('');
      }
    }

    function showMessage(txt, isError = false) {
      if (!msgEl) return;
      msgEl.textContent = txt || '';
      msgEl.style.color = isError ? '#c00' : '#080';
    }

    async function refreshLists() {
      if (!listsArea) return;
      listsArea.textContent = 'Loading lists…';
      try {
        lists = await listsAPI.getLists();
        const containing = await listsAPI.getListsContainingItem(itemTypeStr, itemIdStr);
        savedSet = new Set((containing || []).map(l => l.id));
        renderListCheckboxes();
      } catch (err) {
        const errMsg = (err && (err.message || err.error || JSON.stringify(err))) || String(err);
        listsArea.textContent = 'Unable to load lists: ' + errMsg;
        console.error('refreshLists error:', err);
      }
    }

    function renderListCheckboxes() {
      if (!listsArea) return;
      if (!lists || lists.length === 0) {
        listsArea.innerHTML = '<div>No lists</div>';
        return;
      }
      listsArea.innerHTML = '';
      lists.forEach(l => {
        const row = document.createElement('div');
        row.className = 'list-row';
        const cb = document.createElement('input');
        cb.type = 'checkbox';
        cb.id = 'cb-' + l.id + '-' + itemIdStr;
        cb.checked = savedSet.has(l.id);
        cb.disabled = !!loadingMap[l.id];
        cb.addEventListener('change', () => toggleSave(l.id, cb.checked, cb));
        const label = document.createElement('label');
        label.htmlFor = cb.id;
        label.textContent = l.title + (l.is_default ? ' (default)' : '');
        row.appendChild(cb);
        row.appendChild(label);
        listsArea.appendChild(row);
      });
    }

    async function toggleSave(listId, shouldSave, cbEl) {
      loadingMap[listId] = true;
      cbEl.disabled = true;
      showMessage('');
      try {
        if (shouldSave) {
          await listsAPI.saveItemToList(listId, itemTypeStr, itemIdStr);
          savedSet.add(listId);
          showMessage('Saved');
        } else {
          await listsAPI.removeItemFromList(listId, itemTypeStr, itemIdStr);
          savedSet.delete(listId);
          showMessage('Removed');
        }
      } catch (err) {
        cbEl.checked = !shouldSave;
        showMessage(err && err.message ? err.message : String(err), true);
        console.error(err);
      } finally {
        loadingMap[listId] = false;
        cbEl.disabled = false;
      }
    }

    if (createForm) {
      createForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const title = (newTitle?.value || '').trim();
        if (!title) return showMessage('Enter a list title', true);
        showMessage('Creating list…');
        try {
          const created = await listsAPI.createList(title, null, false);
          lists.push(created);
          await listsAPI.saveItemToList(created.id, itemTypeStr, itemIdStr);
          savedSet.add(created.id);
          if (newTitle) newTitle.value = '';
          renderListCheckboxes();
          showMessage('Created and saved');
        } catch (err) {
          showMessage(err && err.message ? err.message : String(err), true);
          console.error(err);
        }
      });
    }

    // Robust event binding: delegate on root in capture phase to survive bubbling blockers
    root.addEventListener('click', async (e) => {
      const target = e.target;
      const clickedBtn = (target === btn) || (!!btn && target instanceof Element && target.closest(`#${btn.id}`));
      if (!clickedBtn) return;
      try { console.debug('SaveToList click (delegated)', { itemId: itemIdStr }); } catch(_) {}
      e.preventDefault();
      e.stopPropagation();
      if (!panel) return;
      const isHidden = panel.classList.contains('hidden');
      if (isHidden) {
        togglePanel(true);
        await refreshLists();
        if (newTitle) newTitle.focus();
      } else {
        togglePanel(false);
      }
    }, true);

    // Keyboard support on button
    if (btn) {
      btn.addEventListener('keydown', async (e) => {
        if (e.key !== 'Enter' && e.key !== ' ') return;
        e.preventDefault();
        if (!panel) return;
        const isHidden = panel.classList.contains('hidden');
        if (isHidden) {
          togglePanel(true);
          await refreshLists();
          if (newTitle) newTitle.focus();
        } else {
          togglePanel(false);
        }
      });
    }

    // ESC to close when panel is open
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && panel && !panel.classList.contains('hidden')) {
        togglePanel(false);
      }
    });
  }

  // Initialize all instances on the page
  const roots = document.querySelectorAll('[id^="save-root-"][data-item-id]');
  if (roots && roots.length) {
    roots.forEach((r) => { initSave(r); });
  } else {
    // Fallback if script executes very early
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('[id^="save-root-"][data-item-id]').forEach((r) => { initSave(r); });
    });
  }
</script>
