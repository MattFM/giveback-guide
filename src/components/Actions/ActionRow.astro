---
/*
  Props:
    - itemType: 'project' | 'stay'
    - itemId: string
*/
const { itemType = 'project', itemId = '' } = Astro.props;
import SaveToList from "../Save/SaveToList.astro";
---
<div id={"action-row-" + itemId} data-save-wrapper class="w-full" style="display:none" aria-hidden="true">
  <div class="grid grid-cols-2 gap-2 sm:flex sm:flex-row sm:flex-wrap sm:items-center">
    <!-- Save (fills 50% on mobile) -->
    <div class="w-full sm:w-auto">
      <SaveToList itemType={itemType} itemId={itemId} variant="minimal" mobileShowLabel={true} mobileFullWidth={true} />
    </div>

    <!-- Done toggle (fills 50% on mobile) -->
  <button
      id={"done-btn-" + itemId}
      type="button"
      class="w-full sm:w-auto inline-flex items-center justify-center gap-2 px-3 py-2 text-sm border border-gray-300 rounded-md bg-white hover:bg-gray-50 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
      aria-pressed="false"
      aria-label="Mark as done"
      title="Mark as done"
      disabled
    >
      <!-- Done icon (not completed) -->
      <svg id={"done-ic-off-" + itemId} class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.5 11.5 11 14l4-4m6 2a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
      </svg>
      <!-- Done icon (completed) -->
      <svg id={"done-ic-on-" + itemId} class="w-6 h-6 hidden" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
        <path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm13.707-1.293a1 1 0 0 0-1.414-1.414L11 12.586l-1.793-1.793a1 1 0 0 0-1.414 1.414l2.5 2.5a1 1 0 0 0 1.414 0l4-4Z" clip-rule="evenodd"/>
      </svg>
  <span id={"done-label-" + itemId}>Mark as done</span>
    </button>
  </div>

  <!-- Panel slot sits under both buttons -->
  <div id={"save-panel-slot-" + itemId} class="mt-2 w-full"></div>

  <div id={"action-row-msg-" + itemId} class="mt-2 text-sm text-red-600" aria-live="polite"></div>
</div>

<script type="module">
  import { getCurrentUser } from '/src/lib/auth';
  import * as completed from '/src/lib/completed';

  async function initActionRow(root) {
    if (!root || root.dataset.bound === '1') return;
    root.dataset.bound = '1';
    const itemId = root.id.replace('action-row-','');
    const doneBtn = document.getElementById('done-btn-' + itemId);
  const panelSlot = document.getElementById('save-panel-slot-' + itemId);
    const msg = document.getElementById('action-row-msg-' + itemId);
    const itemType = root.querySelector('[id^="save-root-"]')?.dataset?.itemType || 'project';

    function setVisible(el, visible) {
      el.style.display = visible ? '' : 'none';
      el.setAttribute('aria-hidden', visible ? 'false' : 'true');
    }

    try {
      const user = await getCurrentUser();
      if (!user) return; // keep hidden if not logged in
      setVisible(root, true);
      if (doneBtn) doneBtn.disabled = false;
    } catch {
      return;
    }

    // Move the save panel below both buttons so Done stays in place
    try {
      const panelEl = document.getElementById('save-panel-' + itemId);
      if (panelEl && panelSlot && panelEl.parentElement !== panelSlot) {
        panelSlot.appendChild(panelEl);
        panelEl.classList.remove('mt-2');
        panelEl.classList.add('mt-3');
      }
    } catch {}

    function setDoneButtonVisual(isDone) {
      if (!doneBtn) return;
      const off = document.getElementById('done-ic-off-' + itemId);
      const on = document.getElementById('done-ic-on-' + itemId);
      const label = document.getElementById('done-label-' + itemId);
      doneBtn.setAttribute('aria-pressed', String(isDone));
      // Base (inactive) appearance
      const inactiveClasses = ['bg-white','hover:bg-gray-50','text-gray-700','border-gray-300','focus:ring-blue-500'];
      const activeClasses = ['bg-primary-600','hover:bg-primary-700','text-white','border-primary-600','focus:ring-primary-300','shadow'];
      if (isDone) {
        inactiveClasses.forEach(c => doneBtn.classList.remove(c));
        activeClasses.forEach(c => doneBtn.classList.add(c));
      } else {
        activeClasses.forEach(c => doneBtn.classList.remove(c));
        inactiveClasses.forEach(c => doneBtn.classList.add(c));
      }
      if (off && on) {
        if (isDone) { off.classList.add('hidden'); on.classList.remove('hidden'); }
        else { on.classList.add('hidden'); off.classList.remove('hidden'); }
      }
  if (label) label.textContent = isDone ? 'Done' : 'Mark as done';
      doneBtn.title = isDone ? 'Marked as done' : 'Mark as done';
    }

    async function refreshStatus() {
      try {
        const status = await completed.getStatus(itemType, itemId);
        const isDone = !!(status && status.is_completed);
        setDoneButtonVisual(isDone);
      } catch {}
    }

    if (doneBtn) {
      doneBtn.addEventListener('click', async () => {
        if (msg) msg.textContent = '';
        try {
          const pressed = doneBtn.getAttribute('aria-pressed') === 'true';
          const next = !pressed;
          setDoneButtonVisual(next);
          await completed.setCompleted(itemType, itemId, next);
          await refreshStatus();
        } catch (e) {
          if (msg) msg.textContent = 'Unable to update status.';
        }
      });
    }

    await refreshStatus();
  }

  const roots = document.querySelectorAll('[id^="action-row-"]');
  if (roots.length) roots.forEach(initActionRow); else {
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('[id^="action-row-"]').forEach(initActionRow);
    });
  }
</script>