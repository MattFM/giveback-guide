---
/*
  Props:
    - itemType: 'project' | 'stay'
    - itemId: string

  Usage:
    <SaveToList itemType="project" itemId="test-project-123" />
*/
const { itemType = 'project', itemId = '', variant = 'panel', mobileShowLabel = false, mobileFullWidth = false } = Astro.props;
---

<div id={"save-root-" + itemId} data-item-id={itemId} data-item-type={itemType} class={variant === 'minimal' ? 'hidden' : 'hidden bg-white border border-gray-200 rounded-lg p-6 dark:bg-gray-800 dark:border-gray-700'}>
  {variant !== 'minimal' && (
    <div class="mb-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Save</h3>
      <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Save this {itemType} to your personal lists to revisit later.</p>
    </div>
  )}
  <div class="grid grid-cols-2 gap-2 sm:flex sm:flex-row sm:flex-wrap sm:items-center">
    <!-- Save trigger -->
    <button
      id={"save-btn-" + itemId}
      class={
        variant === 'minimal'
          ? `${mobileFullWidth ? 'w-full sm:w-auto ' : ''}inline-flex items-center justify-center gap-2 px-3 py-2 text-sm border border-gray-300 rounded-md bg-white hover:bg-gray-50 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500`
          : 'w-full inline-flex items-center justify-center gap-2 bg-primary-600 text-white hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-md px-4 py-2 dark:focus:ring-primary-800'
      }
      aria-expanded="false"
      aria-controls={"save-panel-" + itemId}
      type="button"
      title="Save to a list"
    >
      <!-- Save icon (unsaved) -->
      <svg id={"save-ic-off-" + itemId} class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12.01 6.001C6.5 1 1 8 5.782 13.001L12.011 20l6.23-7C23 8 17.5 1 12.01 6.002Z"/>
      </svg>
      <!-- Save icon (saved) -->
      <svg id={"save-ic-on-" + itemId} class="w-6 h-6 hidden" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
        <path d="m12.75 20.66 6.184-7.098c2.677-2.884 2.559-6.506.754-8.705-.898-1.095-2.206-1.816-3.72-1.855-1.293-.034-2.652.43-3.963 1.442-1.315-1.012-2.678-1.476-3.973-1.442-1.515.04-2.825.76-3.724 1.855-1.806 2.201-1.915 5.823.772 8.706l6.183 7.097c.19.216.46.34.743.34a.985.985 0 0 0 .743-.34Z"/>
      </svg>
      <span id={"save-label-" + itemId} class={variant === 'minimal' ? (mobileShowLabel ? '' : 'hidden sm:inline') : ''}>Save</span>
    </button>

    <!-- Done toggle -->
    <button
      id={"done-btn-" + itemId}
      type="button"
      class="w-full sm:w-auto inline-flex items-center justify-center gap-2 px-3 py-2 text-sm border border-gray-300 rounded-md bg-white hover:bg-gray-50 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
      aria-pressed="false"
      aria-label="Mark as done"
      title="Mark as done"
    >
      <!-- Done icon (not completed) -->
      <svg id={"done-ic-off-" + itemId} class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.5 11.5 11 14l4-4m6 2a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
      </svg>
      <!-- Done icon (completed) -->
      <svg id={"done-ic-on-" + itemId} class="w-6 h-6 hidden" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
        <path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm13.707-1.293a1 1 0 0 0-1.414-1.414L11 12.586l-1.793-1.793a1 1 0 0 0-1.414 1.414l2.5 2.5a1 1 0 0 0 1.414 0l4-4Z" clip-rule="evenodd"/>
      </svg>
      <span id={"done-label-" + itemId}>Mark as done</span>
    </button>
  </div>

  <div id={"actions-msg-" + itemId} class="mt-2 text-sm" aria-live="polite"></div>

  <!-- Inline panel -->
  <div id={"save-panel-" + itemId} class={variant === 'minimal' ? 'hidden mt-2 p-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700' : 'hidden mt-3 p-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700'}>
    <div class="flex items-center justify-between mb-3">
      <h3 id={"save-modal-title-" + itemId} class="text-base font-semibold text-gray-900 dark:text-white">Your Lists</h3>
      <span class="text-xs text-gray-500">Select lists to save</span>
    </div>

    <div id={"lists-area-" + itemId} class="lists-area text-sm text-gray-600 dark:text-gray-300">Loading listsâ€¦</div>

    <form id={"create-form-" + itemId} class="mt-4 flex items-center gap-2">
      <input id={"new-title-" + itemId} placeholder="New list title" class="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm dark:bg-gray-900 dark:border-gray-700 dark:text-gray-100" />
      <button type="submit" class="px-3 py-2 bg-primary-600 text-white rounded-md text-sm hover:bg-primary-700">Create</button>
    </form>

    <div id={"msg-" + itemId} class="msg mt-2 text-sm" aria-live="polite"></div>
  </div>
</div>

<!-- Import the external client script -->
<script src="/src/components/features/save/saveToList.client.js"></script>

<script is:inline>
// Client-side SaveToList functionality for static builds
(async function() {
  // Wait for the API to be available
  while (!window.SaveToListAPI) {
    await new Promise(resolve => setTimeout(resolve, 10));
  }
  
  const {
    getCurrentUser,
    getLists,
    getListsContainingItem,
    saveItemToList,
    removeItemFromList,
    createList,
    getCompletedStatus,
    setCompleted
  } = window.SaveToListAPI;
  
  // Helper functions for the component

  async function initSave(root) {
    // prevent duplicate init in HMR
    if (root?.dataset?.saveBound === '1') return;
    root.dataset.saveBound = '1';

    console.log('Initializing SaveToList for:', root);

    // Check authentication - only show component to authenticated users
    const user = await getCurrentUser();
    if (!user) {
      console.log('SaveToList: No authenticated user, hiding component');
      root.style.display = 'none';
      return;
    }
    
    // User is authenticated, show the component
    console.log('SaveToList: User authenticated, showing component');
    root.classList.remove('hidden');

    const itemIdStr = root?.dataset?.itemId || '';
    const itemTypeStr = root?.dataset?.itemType || 'project';

    const $ = (sel) => root.querySelector(sel);
    const byId = (id) => document.getElementById(id);

    if (!itemIdStr) {
      const btn = $('[id^="save-btn-"]');
      const doneBtn = $('[id^="done-btn-"]');
      const listsArea = $('[id^="lists-area-"]');
      const msgEl = $('[id^="msg-"]');
      const actionsMsg = $('[id^="actions-msg-"]');
      if (btn) {
        btn.setAttribute('disabled', 'true');
        btn.setAttribute('aria-disabled', 'true');
        btn.title = 'Save unavailable (missing item id)';
        btn.style.opacity = '0.6';
        btn.style.pointerEvents = 'none';
      }
      if (doneBtn) {
        doneBtn.setAttribute('disabled', 'true');
        doneBtn.setAttribute('aria-disabled', 'true');
        doneBtn.title = 'Done unavailable (missing item id)';
        doneBtn.style.opacity = '0.6';
        doneBtn.style.pointerEvents = 'none';
      }
      if (listsArea) listsArea.textContent = 'Save unavailable: missing item id.';
      if (msgEl) msgEl.textContent = '';
      if (actionsMsg) actionsMsg.textContent = '';
      return;
    }

    // scoped references
    const btn = $(`#save-btn-${itemIdStr}`);
    const panel = $(`#save-panel-${itemIdStr}`);
    const listsArea = $(`#lists-area-${itemIdStr}`);
    const msgEl = $(`#msg-${itemIdStr}`);
    const doneBtn = $(`#done-btn-${itemIdStr}`);
    const actionsMsg = $(`#actions-msg-${itemIdStr}`);
    const createForm = $(`#create-form-${itemIdStr}`);
    const newTitle = $(`#new-title-${itemIdStr}`);

    console.log('SaveToList elements found:', { 
      btn: !!btn, 
      panel: !!panel, 
      doneBtn: !!doneBtn,
      itemId: itemIdStr 
    });

    function updateSaveButtonIcon() {
      try {
        const off = byId('save-ic-off-' + itemIdStr);
        const on = byId('save-ic-on-' + itemIdStr);
        const label = byId('save-label-' + itemIdStr);
        const isSaved = savedSet && savedSet.size > 0;
        if (off && on) {
          if (isSaved) {
            off.classList.add('hidden');
            on.classList.remove('hidden');
            if (btn) btn.title = 'Saved to your lists';
          } else {
            on.classList.add('hidden');
            off.classList.remove('hidden');
            if (btn) btn.title = 'Save to a list';
          }
        }
        if (label) label.textContent = isSaved ? 'Saved' : 'Save';
        if (btn) {
          const inactive = ['bg-white','hover:bg-gray-50','text-gray-700','border-gray-300','focus:ring-blue-500'];
          const active = ['bg-primary-600','hover:bg-primary-700','text-white','border-primary-600','focus:ring-primary-300','shadow'];
          if (isSaved) {
            inactive.forEach(c => btn.classList.remove(c));
            active.forEach(c => btn.classList.add(c));
          } else {
            active.forEach(c => btn.classList.remove(c));
            inactive.forEach(c => btn.classList.add(c));
          }
        }
      } catch (e) {
        console.error('Error updating save button icon:', e);
      }
    }

    let lists = [];
    let savedSet = new Set();
    const loadingMap = {};

    // preload saved + done state
    (async () => {
      try {
        const containing = await getListsContainingItem(itemTypeStr, itemIdStr);
        savedSet = new Set((containing || []).map((l) => l.id));
        updateSaveButtonIcon();
      } catch (e) {
        console.error('Error loading saved state:', e);
      }
      try {
        const status = await getCompletedStatus(itemTypeStr, itemIdStr);
        setDoneButtonVisual(!!(status && status.is_completed));
      } catch (e) {
        console.error('Error loading completed state:', e);
      }
    })();

    function togglePanel(show) {
      if (!panel) return;
      const shouldShow = typeof show === 'boolean' ? show : panel.classList.contains('hidden');
      if (shouldShow) {
        panel.classList.remove('hidden');
        if (btn) btn.setAttribute('aria-expanded', 'true');
      } else {
        panel.classList.add('hidden');
        if (btn) btn.setAttribute('aria-expanded', 'false');
        showMessage('');
      }
    }

    function setDoneButtonVisual(isDone) {
      if (!doneBtn) return;
      doneBtn.setAttribute('aria-pressed', String(isDone));
      const off = byId('done-ic-off-' + itemIdStr);
      const on = byId('done-ic-on-' + itemIdStr);
      const label = byId('done-label-' + itemIdStr);
      const inactive = ['bg-white','hover:bg-gray-50','text-gray-700','border-gray-300','focus:ring-blue-500'];
      const active = ['bg-primary-600','hover:bg-primary-700','text-white','border-primary-600','focus:ring-primary-300','shadow'];
      if (isDone) {
        inactive.forEach(c => doneBtn.classList.remove(c));
        active.forEach(c => doneBtn.classList.add(c));
      } else {
        active.forEach(c => doneBtn.classList.remove(c));
        inactive.forEach(c => doneBtn.classList.add(c));
      }
      if (off && on) {
        if (isDone) { off.classList.add('hidden'); on.classList.remove('hidden'); }
        else { on.classList.add('hidden'); off.classList.remove('hidden'); }
      }
      if (label) label.textContent = isDone ? 'Done' : 'Mark as done';
      doneBtn.title = isDone ? 'Marked as done' : 'Mark as done';
    }

    function showMessage(txt, isError = false) {
      if (!msgEl) return;
      msgEl.classList.remove('text-red-600');
      if (isError && txt) {
        msgEl.textContent = txt;
        msgEl.classList.add('text-red-600');
      } else {
        msgEl.textContent = '';
      }
    }

    async function refreshLists() {
      if (!listsArea) return;
      listsArea.textContent = 'Loading listsâ€¦';
      try {
        lists = await getLists();
        const containing = await getListsContainingItem(itemTypeStr, itemIdStr);
        savedSet = new Set((containing || []).map((l) => l.id));
        renderListCheckboxes();
        updateSaveButtonIcon();
      } catch (err) {
        const errMsg = (err && (err.message || err.error || JSON.stringify(err))) || String(err);
        listsArea.textContent = 'Unable to load lists: ' + errMsg;
        console.error('refreshLists error:', err);
      }
    }

    function renderListCheckboxes() {
      if (!listsArea) return;
      if (!lists || lists.length === 0) {
        listsArea.innerHTML = '<div class="text-gray-500 dark:text-gray-400">You have no lists yet. Create one below!</div>';
        return;
      }
      listsArea.innerHTML = '';
      const group = document.createElement('div');
      group.className = 'divide-y divide-gray-200 dark:divide-gray-700 border border-gray-200 dark:border-gray-700 rounded-md overflow-hidden';
      lists.forEach((l) => {
        const row = document.createElement('div');
        row.className = 'flex items-center justify-between gap-3 p-3 bg-white dark:bg-gray-800';
        row.dataset.listId = l.id;

        const left = document.createElement('div');
        left.className = 'flex items-center gap-3';
        const cb = document.createElement('input');
        cb.type = 'checkbox';
        cb.id = 'cb-' + l.id + '-' + itemIdStr;
        cb.checked = savedSet.has(l.id);
        cb.disabled = !!loadingMap[l.id];
        cb.className = 'h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500';
        cb.addEventListener('change', () => toggleSave(l.id, cb.checked, cb));

        const label = document.createElement('label');
        label.htmlFor = cb.id;
        label.className = 'text-sm text-gray-900 dark:text-gray-100';
        label.innerHTML = `${l.title}${l.is_default ? ' <span class="ml-2 text-xs text-gray-500">(default)</span>' : ''}`;

        left.appendChild(cb);
        left.appendChild(label);

        const status = document.createElement('span');
        status.className = 'text-xs text-gray-400';
        status.textContent = savedSet.has(l.id) ? 'Saved' : '';

        row.appendChild(left);
        row.appendChild(status);
        group.appendChild(row);
      });
      listsArea.appendChild(group);
    }

    async function toggleSave(listId, shouldSave, cbEl) {
      loadingMap[listId] = true;
      cbEl.disabled = true;
      showMessage('');
      try {
        const row = listsArea?.querySelector(`[data-list-id="${listId}"]`);
        const status = row?.querySelector('span');
        if (status) status.textContent = shouldSave ? 'Savingâ€¦' : 'Removingâ€¦';
      } catch {}
      try {
        if (shouldSave) {
          await saveItemToList(listId, itemTypeStr, itemIdStr);
          savedSet.add(listId);
          const row = listsArea?.querySelector(`[data-list-id="${listId}"]`);
          const status = row?.querySelector('span');
          if (status) status.textContent = 'Saved';
        } else {
          await removeItemFromList(listId, itemTypeStr, itemIdStr);
          savedSet.delete(listId);
          const row = listsArea?.querySelector(`[data-list-id="${listId}"]`);
          const status = row?.querySelector('span');
          if (status) status.textContent = '';
        }
      } catch (err) {
        cbEl.checked = !shouldSave;
        showMessage(err && err.message ? err.message : String(err), true);
        console.error(err);
      } finally {
        loadingMap[listId] = false;
        cbEl.disabled = false;
        updateSaveButtonIcon();
      }
    }

    if (createForm) {
      createForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const title = (newTitle?.value || '').trim();
        if (!title) return showMessage('Enter a list title', true);
        try {
          const created = await createList(title);
          lists.push(created);
          await saveItemToList(created.id, itemTypeStr, itemIdStr);
          savedSet.add(created.id);
          if (newTitle) newTitle.value = '';
          renderListCheckboxes();
          updateSaveButtonIcon();
          showMessage('List created and item saved!');
        } catch (err) {
          showMessage(err && err.message ? err.message : String(err), true);
          console.error(err);
        }
      });
    }

    if (btn) {
      btn.addEventListener('click', async (e) => {
        console.log('Save button clicked!');
        e.preventDefault();
        e.stopPropagation();
        
        // Check auth on button click
        const user = await getCurrentUser();
        if (!user) {
          showMessage('Please log in to save items to lists.', true);
          return;
        }
        
        if (!panel) return;
        const isHidden = panel.classList.contains('hidden');
        if (isHidden) {
          togglePanel(true);
          await refreshLists();
          if (newTitle) newTitle.focus();
        } else {
          togglePanel(false);
        }
      });

      btn.addEventListener('keydown', async (e) => {
        if (e.key !== 'Enter' && e.key !== ' ') return;
        console.log('Save button key pressed!');
        e.preventDefault();
        if (!panel) return;
        const isHidden = panel.classList.contains('hidden');
        if (isHidden) {
          togglePanel(true);
          await refreshLists();
          if (newTitle) newTitle.focus();
        } else {
          togglePanel(false);
        }
      });
    }

    if (doneBtn) {
      doneBtn.addEventListener('click', async () => {
        console.log('Done button clicked!');
        if (actionsMsg) actionsMsg.textContent = '';
        
        // Check auth on button click
        const user = await getCurrentUser();
        if (!user) {
          if (actionsMsg) actionsMsg.textContent = 'Please log in to mark items as done.';
          return;
        }
        
        const pressed = (doneBtn.getAttribute('aria-pressed') === 'true');
        const next = !pressed;
        setDoneButtonVisual(next);
        try {
          const res = await setCompleted(itemTypeStr, itemIdStr, next);
          if (!res || !res.success) {
            setDoneButtonVisual(pressed);
            if (actionsMsg) actionsMsg.textContent = 'Unable to update status.';
            return;
          }
          const status = await getCompletedStatus(itemTypeStr, itemIdStr);
          setDoneButtonVisual(!!(status && status.is_completed));
          if (actionsMsg) actionsMsg.textContent = next ? 'Marked as done!' : 'Unmarked as done!';
        } catch (err) {
          setDoneButtonVisual(pressed);
          if (actionsMsg) actionsMsg.textContent = 'Unable to update status.';
          console.error('Done button error:', err);
        }
      });
    }

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && panel && !panel.classList.contains('hidden')) {
        togglePanel(false);
      }
    });
  }

  function initAll() {
    const roots = document.querySelectorAll('[id^="save-root-"][data-item-id]');
    console.log('Found SaveToList roots:', roots.length);
    if (roots && roots.length) {
      roots.forEach((r) => initSave(r));
    } else {
      document.addEventListener('DOMContentLoaded', () => {
        const laterRoots = document.querySelectorAll('[id^="save-root-"][data-item-id]');
        console.log('Found SaveToList roots after DOMContentLoaded:', laterRoots.length);
        laterRoots.forEach((r) => initSave(r));
      });
    }
  }

  initAll();
})();
</script>
