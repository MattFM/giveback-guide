---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  fullWidth?: boolean;
  href?: string;
  class?: string;
  [key: string]: any; // Allow any other HTML attributes
}

const {
  variant = 'primary',
  size = 'md',
  type = 'button',
  disabled = false,
  fullWidth = false,
  href,
  class: className = '',
  ...rest
} = Astro.props;

const baseStyles = 'inline-flex items-center justify-center gap-2 font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

const variants = {
  primary: 'bg-black text-white hover:bg-gray-900 focus:ring-gray-500',
  secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
  outline: 'border-1 border-black text-black hover:bg-gray-100 focus:ring-gray-500',
  ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500',
  danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
};

const sizes = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg',
};

const widthClass = fullWidth ? 'w-full' : '';

const classes = `${baseStyles} ${variants[variant]} ${sizes[size]} ${widthClass} ${className}`.trim();

const Tag = href ? 'a' : 'button';
---

<Tag
  class={classes}
  type={!href ? type : undefined}
  disabled={disabled}
  href={href}
  {...rest}
>
  <slot />
</Tag>
