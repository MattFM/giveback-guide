---
import { getCollection } from "astro:content";
import BaseSelectDropdown from "./BaseSelectDropdown.astro";

// Get the current country from the URL
const currentCountryPromise = (async () => {
  const pathSegments = Astro.url.pathname.split("/");
  const potentialCountry = pathSegments[2];

  const stays = await getCollection("stays");
  const validCountries = stays.reduce((acc: Set<string>, stay) => {
    const countries = Array.isArray(stay.data.properties.sCountry)
      ? stay.data.properties.sCountry.map((c) =>
          c.toLowerCase().replace(/\s+/g, "-")
        )
      : [String(stay.data.properties.sCountry).toLowerCase().replace(/\s+/g, "-")];
    countries.forEach((country) => acc.add(country));
    return acc;
  }, new Set<string>());

  return validCountries.has(potentialCountry) ? potentialCountry : null;
})();
const currentCountry = await currentCountryPromise;

const stays = await getCollection("stays");

// Count the number of stays for each country
const countryCounts = stays.reduce((acc: Record<string, number>, stay) => {
  const countries = Array.isArray(stay.data.properties.sCountry)
    ? stay.data.properties.sCountry
    : [stay.data.properties.sCountry];

  countries.forEach((country) => {
    if (country) {
      acc[country] = (acc[country] || 0) + 1;
    }
  });

  return acc;
}, {});

// Extract unique countries and sort alphabetically
const uniqueCountries = Object.keys(countryCounts).sort();

// Transform to items array for BaseSelectDropdown
const items = uniqueCountries.map((country) => {
  const countrySlug = country.toLowerCase().replace(/\s+/g, "-");
  return {
    name: country,
    count: countryCounts[country],
    slug: countrySlug,
    url: `/stays/${countrySlug}`,
  };
});
---

<BaseSelectDropdown
  items={items}
  currentItem={currentCountry}
  placeholder="Countries"
  id="stay-countries"
/>