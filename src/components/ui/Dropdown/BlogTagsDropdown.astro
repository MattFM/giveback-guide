---
import { getCollection } from "astro:content";
import BaseSelectDropdown from "./BaseSelectDropdown.astro";

// Get the current tag from the URL
const currentTagPromise = (async () => {
  const pathSegments = Astro.url.pathname.split("/");
  const potentialTag = pathSegments[2];

  const posts = await getCollection("posts");
  const validTags = posts.reduce((acc: Set<string>, post) => {
    const tags = Array.isArray(post.data.properties.bTags)
      ? post.data.properties.bTags.map((c) =>
          c.toLowerCase().replace(/\s+/g, "-")
        )
      : [String(post.data.properties.bTags).toLowerCase().replace(/\s+/g, "-")];
    tags.forEach((tag) => acc.add(tag));
    return acc;
  }, new Set<string>());

  return validTags.has(potentialTag) ? potentialTag : null;
})();
const currentTag = await currentTagPromise;

const posts = await getCollection("posts");

// Count the number of posts for each tag
const tagCounts = posts.reduce((acc: Record<string, number>, post) => {
  const tags = Array.isArray(post.data.properties.bTags)
    ? post.data.properties.bTags
    : [post.data.properties.bTags];

  tags.forEach((tag) => {
    if (tag) {
      acc[tag] = (acc[tag] || 0) + 1;
    }
  });

  return acc;
}, {});

// Extract unique tags and sort alphabetically
const uniqueTags = Object.keys(tagCounts).sort();

// Transform to items array for BaseSelectDropdown
const items = uniqueTags.map((tag) => {
  const tagSlug = tag.toLowerCase().replace(/\s+/g, "-");
  return {
    name: tag,
    count: tagCounts[tag],
    slug: tagSlug,
    url: `/blog/${tagSlug}`,
  };
});
---

<BaseSelectDropdown
  items={items}
  currentItem={currentTag}
  placeholder="Categories"
  id="blog-tags"
/>