---
import ResponsiveImage from '../ui/Image/ResponsiveImage.astro';
import BaseCard from '../ui/BaseCard.astro';

interface Props { stay: any }
const { stay } = Astro.props as Props;
---

<BaseCard>
  <div class="relative">
        <a href={`/stays/${stay.data.properties.sSlug}/`}>
          <ResponsiveImage
            class="w-full rounded-lg h-64 object-cover"
            src={stay.data.properties.sImageURL1}
            alt=""
            preset="card"
            fallbackWidth={600}
          />
          {stay.data.properties.sVerify && (
            <div class="absolute top-2 left-2 bg-gbgyellow bg-opacity-80 rounded-md px-2 py-1 flex items-center gap-1">
              <svg
                class="h-5 w-5 text-black"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  fill-rule="evenodd"
                  d="M12 2c-.791 0-1.55.314-2.11.874l-.893.893a.985.985 0 0 1-.696.288H7.04A2.984 2.984 0 0 0 4.055 7.04v1.262a.986.986 0 0 1-.288.696l-.893.893a2.984 2.984 0 0 0 0 4.22l.893.893a.985.985 0 0 1 .288.696v1.262a2.984 2.984 0 0 0 2.984 2.984h1.262c.261 0 .512.104.696.288l.893.893a2.984 2.984 0 0 0 4.22 0l.893-.893a.985.985 0 0 1 .696-.288h1.262a2.984 2.984 0 0 0 2.984-2.984V15.7c0-.261.104-.512.288-.696l.893-.893a2.984 2.984 0 0 0 0-4.22l-.893-.893a.985.985 0 0 1-.288-.696V7.04a2.984 2.984 0 0 0-2.984-2.984h-1.262a.985.985 0 0 1-.696-.288l-.893-.893A2.984 2.984 0 0 0 12 2Zm3.683 7.73a1 1 0 1 0-1.414-1.413l-4.253 4.253-1.277-1.277a1 1 0 0 0-1.415 1.414l1.985 1.984a1 1 0 0 0 1.414 0l4.96-4.96Z"
                  clip-rule="evenodd"
                />
              </svg>
              <p class="text-xs font-medium text-black dark:text-white">
                {stay.data.properties.sVerify}
              </p>
            </div>
          )}
        </a>
        </div>
        <div class="absolute top-2 right-2">
          <!-- Save control removed from card; Save UI is available on stay pages only -->
        </div>
  <p>
    {Array.isArray(stay.data.properties.sCountry)
      ? stay.data.properties.sCountry.map((country: string) => (
          <span
            class="inline-flex items-center px-3 py-0.5 rounded-full text-sm font-medium border border-solid border-gray-300 bg-gray-50 text-gray-800 dark:bg-gray-900 dark:text-gray-300 ml-2 mt-4 mb-2"
          >
            <a
              href={`/stays/${country.toLowerCase().replace(/\s+/g, "-")}`}
            >
              {country}
            </a>
          </span>
        ))
      : stay.data.properties.sCountry}
  </p>
  <h2 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white px-4">
    <a href={`/stays/${stay.data.properties.sSlug}/`}>
      {stay.data.properties.sTitle}
    </a>
  </h2>
  <p class="mt-2 text-sm font-normal text-gray-400 dark:text-gray-400 px-4">
           <span class="text-gray-800">{stay.data.properties.sName}</span> is a <span class="text-gray-900">{stay.data.properties.sType}</span> in <span class="text-gray-900">
      {
        (() => {
          const locales = stay.data.properties.sLocale;
          const country = Array.isArray(stay.data.properties.sCountry) 
            ? stay.data.properties.sCountry[0] 
            : stay.data.properties.sCountry;
          const countrySlug = country.toLowerCase().replace(/\s+/g, "-");
          
          if (!Array.isArray(locales)) {
            const localeSlug = locales.toLowerCase().replace(/\s+/g, "-");
            return (
              <a 
                href={`/stays/${countrySlug}/${localeSlug}`}
                class="inline-block px-1.5 py-0.5 text-gray-900 border border-gray-300/60 rounded bg-gray-100/40 dark:bg-gray-700/40 dark:border-gray-600/60 dark:text-gray-300 hover:bg-gray-200/60 dark:hover:bg-gray-600/60 transition-colors"
              >
                {locales}
              </a>
            );
          }
          
          if (locales.length === 0) return "";
          if (locales.length === 1) {
            const localeSlug = locales[0].toLowerCase().replace(/\s+/g, "-");
            return (
              <a 
                href={`/stays/${countrySlug}/${localeSlug}`}
                class="inline-block px-1.5 py-0.5 text-gray-900 border border-gray-300/60 rounded bg-gray-100/40 dark:bg-gray-700/40 dark:border-gray-600/60 dark:text-gray-300 hover:bg-gray-200/60 dark:hover:bg-gray-600/60 transition-colors"
              >
                {locales[0]}
              </a>
            );
          }
          if (locales.length === 2) {
            return (
              <>
                <a 
                  href={`/stays/${countrySlug}/${locales[0].toLowerCase().replace(/\s+/g, "-")}`}
                  class="inline-block px-1.5 py-0.5 text-gray-900 border border-gray-300/60 rounded bg-gray-100/40 dark:bg-gray-700/40 dark:border-gray-600/60 dark:text-gray-300 hover:bg-gray-200/60 dark:hover:bg-gray-600/60 transition-colors"
                >
                  {locales[0]}
                </a>
                {" & "}
                <a 
                  href={`/stays/${countrySlug}/${locales[1].toLowerCase().replace(/\s+/g, "-")}`}
                  class="inline-block px-1.5 py-0.5 text-gray-900 border border-gray-300/60 rounded bg-gray-100/40 dark:bg-gray-700/40 dark:border-gray-600/60 dark:text-gray-300 hover:bg-gray-200/60 dark:hover:bg-gray-600/60 transition-colors"
                >
                  {locales[1]}
                </a>
              </>
            );
          }
          
          return (
            <>
              {locales.slice(0, -1).map((locale, index) => (
                <>
                  <a 
                    href={`/stays/${countrySlug}/${locale.toLowerCase().replace(/\s+/g, "-")}`}
                    class="inline-block px-1.5 py-0.5 text-gray-900 border border-gray-300/60 rounded bg-gray-100/40 dark:bg-gray-700/40 dark:border-gray-600/60 dark:text-gray-300 hover:bg-gray-200/60 dark:hover:bg-gray-600/60 transition-colors"
                  >
                    {locale}
                  </a>
                  {index < locales.length - 2 ? ", " : ""}
                </>
              ))}
              {" & "}
              <a 
                href={`/stays/${countrySlug}/${locales[locales.length - 1].toLowerCase().replace(/\s+/g, "-")}`}
                class="inline-block px-1.5 py-0.5 text-gray-900 border border-gray-300/60 rounded bg-gray-100/40 dark:bg-gray-700/40 dark:border-gray-600/60 dark:text-gray-300 hover:bg-gray-200/60 dark:hover:bg-gray-600/60 transition-colors"
              >
                {locales[locales.length - 1]}
              </a>
            </>
          );
        })()
      }
    </span>
  </p>
</BaseCard>