---

import { getCollection } from "astro:content";
import MainLayout from "../../../layouts/MainLayout.astro";
import type { GetStaticPathsOptions } from "astro";
import PostCard from "../../../components/PostCard.astro";
import BCategoryDropdown from "../../../components/BCategoryDropdown.astro";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  // Fetch all posts
  const posts = await getCollection("posts");

  // Extract unique tags from all posts
  const tags = new Set(
    posts.flatMap((post) =>
      Array.isArray(post.data.properties.bTags)
        ? post.data.properties.bTags
        : [post.data.properties.bTags as string]
    )
  );

  // Generate paginated paths for each tag
  const paths = [];
  for (const tag of tags) {
    const filteredPosts = posts.filter((post) =>
      Array.isArray(post.data.properties.bTags)
        ? post.data.properties.bTags.some(
            (c) => c.toLowerCase().replace(/\s+/g, "-") === tag.toLowerCase().replace(/\s+/g, "-")
          )
        : typeof post.data.properties.bTags === "string" &&
          (post.data.properties.bTags as string).toLowerCase().replace(/\s+/g, "-") ===
          tag.toLowerCase().replace(/\s+/g, "-")
    );

    const paginatedPaths = paginate(filteredPosts, {
      pageSize: 9, // Number of projects per page
      params: { tag: tag.toLowerCase().replace(/\s+/g, "-") },
      props: { tag }, // Pass the country as a prop
    });

    paths.push(...paginatedPaths);
  }

  return paths;
}

const { tag } = Astro.params; // Get the current country from the URL
const { page } = Astro.props; // Get the paginated data

// Convert the country slug back to a readable format
const readableTag = tag
  .split("-")
  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
  .join(" ");
---

<MainLayout title={`Posts in ${readableTag} - Page ${page.currentPage} of ${page.lastPage}`}>
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="max-w-screen-md mb-8 lg:mb-16">
        <h1
          class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
        >
          Projects in {readableTag}
        </h1>
        <p class="text-gray-500 sm:text-xl dark:text-gray-400">
          A list of projects located in {readableTag}.
        </p>
      </div>
      <div class="flex flex-col items-start justify-between p-2 space-y-3 flex-row space-y-0 mb-4">
        <div ><span class="text-sm font-normal text-gray-500 dark:text-gray-400"
          >Showing <span class="font-semibold text-gray-900 dark:text-white"
            >{page.start + 1}-{page.end + 1}</span
          > of <span class="font-semibold text-gray-900 dark:text-white"
            >{page.total}</span
          > projects</span
        ></div>
        <div ><BCategoryDropdown /></div>
    </div>
      <div
        class="space-y-8 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12 md:space-y-0"
      >
        {page.data.map((post) => (
          <PostCard post={post} />
        ))}
      </div>
    </div>
  </section>

  <!-- Pagination -->
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="flex justify-center items-center">
        <!-- Previous Button -->
        {
            page.url.prev ? (
        <a href={page.url.prev} class="flex items-center justify-center px-4 h-10 me-3 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
          <svg class="w-3.5 h-3.5 me-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5H1m0 0 4 4M1 5l4-4"/>
          </svg>
          Previous
        </a>
        ) : null
      }
        {
            page.url.next ? (
        <a href={page.url.next} class="flex items-center justify-center px-4 h-10 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
          Next
          <svg class="w-3.5 h-3.5 ms-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
          </svg>
        </a>
        ) : null
      }
      </div>
    </div>
  </section>
</MainLayout>