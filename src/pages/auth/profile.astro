---
import MainLayout from '../../layouts/MainLayout.astro';
---

<MainLayout title="Profile">
    <div class="max-w-3xl mx-auto px-4 py-8">
        <div class="p-6"> <!-- flattened container: no border/box -->
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-2xl font-semibold">Your Profile</h1>
                </div>
                <a href="/auth/dashboard" class="text-sm text-primary-600 hover:underline">Back to dashboard</a>
            </div>

            <div class="space-y-6">
                <!-- Profile section -->
                <section id="profileSection" class="bg-gray-50 p-6 rounded-md">
                    <div class="mb-2">
                        <h2 class="text-lg font-medium">Profile</h2>
                        <p class="text-sm text-gray-500">Edit your profile</p>
                    </div>
                    <div id="profileArea">Loading...</div>
                </section>

                <!-- Newsletter section (separate from the profile form) -->
                <section id="newsletterSection" class="bg-gray-50 p-6 rounded-md">
                    <div class="mb-2">
                        <h2 class="text-lg font-medium">Newsletter</h2>
                        <p class="text-sm text-gray-500">Manage your subscription preferences</p>
                    </div>
                    <div id="newsletterArea"><!-- populated by JS --></div>
                </section>

                <!-- Danger section -->
                <section id="dangerSection" class="bg-gray-50 p-6 rounded-md">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-sm font-semibold text-red-700">Danger zone</h3>
                            <p class="text-sm text-gray-500">Account deletion is irreversible. Open the confirmation modal to proceed.</p>
                        </div>
                        <div>
                            <button id="deleteTriggerBtn" class="text-sm text-red-600 hover:underline cursor-pointer">Delete account</button>
                        </div>
                    </div>
                </section>

            <!-- Confirmation modal (hidden until triggered) -->
            <div id="deleteModal" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black/50 px-4">
                <div role="dialog" aria-modal="true" aria-labelledby="deleteModalTitle" class="w-full max-w-lg bg-white rounded-lg shadow-lg p-6">
                    <h2 id="deleteModalTitle" class="text-lg font-semibold text-red-700">Confirm account deletion</h2>
                    <p class="mt-2 text-sm text-gray-700">This action will permanently delete your account and all associated data. To confirm, type <code>DELETE</code> below and click Confirm.</p>

                    <div class="mt-4">
                        <label for="modalDangerInput" class="block text-sm font-medium text-gray-700">Type <code>DELETE</code> to confirm</label>
                        <input id="modalDangerInput" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" placeholder="DELETE" />
                    </div>

                    <div class="mt-6 flex items-center justify-end gap-3">
                        <button id="modalCancelBtn" class="px-4 py-2 border rounded-md cursor-pointer">Cancel</button>
                        <button id="modalConfirmBtn" class="px-4 py-2 bg-red-600 text-white rounded-md cursor-pointer" disabled>Confirm delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</MainLayout>

<script>
    import { account, getCurrentUser, updateAccountName, deleteAccount, updateAccountPreference } from '../../lib/appwrite';

    // Toast helpers
    const ensureToastContainer = () => {
        let container = document.getElementById('toastContainer');
        if (!container) {
            container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'fixed top-20 right-6 z-50 flex flex-col items-end gap-2';
            document.body.appendChild(container);
        }
        return container as HTMLElement;
    };

    const showToast = (type: 'success' | 'error', message: string) => {
        const container = ensureToastContainer();
        const toast = document.createElement('div');
        toast.className = 'flex items-center p-4 w-full max-w-xs text-gray-700 bg-white rounded-lg shadow ring-1 ring-black/5';
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg ${type === 'success' ? 'bg-green-100 text-green-500' : 'bg-red-100 text-red-500'}">
                ${type === 'success' ? '<svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414L8.414 15l-4.121-4.121a1 1 0 011.414-1.414L8.414 12.172l7.879-7.879a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>' : '<svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.366-.446.957-.71 1.553-.713h.38c.596.003 1.187.267 1.553.713l5.078 6.183c.344.418.45.994.286 1.505a2 2 0 01-1.9 1.322H4.74a2 2 0 01-1.9-1.322 1.75 1.75 0 01.286-1.505l5.078-6.183zM11 9a1 1 0 10-2 0v3a1 1 0 002 0V9zM9 14a1 1 0 100 2 1 1 0 000-2z" clip-rule="evenodd"></path></svg>'}
            </div>
            <div class="ml-3 text-sm font-normal">${message}</div>
            <button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-transparent text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 inline-flex h-8 w-8" aria-label="Close">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M6.293 6.293a1 1 0 011.414 0L10 8.586l2.293-2.293a1 1 0 111.414 1.414L11.414 10l2.293 2.293a1 1 0 01-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 01-1.414-1.414L8.586 10 6.293 7.707a1 1 0 010-1.414z"/></svg>
            </button>
        `;

        const closeBtn = toast.querySelector('button');
        closeBtn?.addEventListener('click', () => toast.remove());

        container.appendChild(toast);

        // Auto remove after 6s
        setTimeout(() => toast.remove(), 6000);
    };

    // Worker URL
    const WORKER_URL = 'https://spring-block-2fcc.matt-c4f.workers.dev';

    async function callMailerLite(action: 'subscribe' | 'unsubscribe', subscriberId = undefined, email = undefined, name = undefined) {
        const jwtResp = await account.createJWT();
        const jwt = jwtResp?.jwt;
        if (!jwt) throw new Error('Failed to create Appwrite JWT');

        const bodyObj: any = { action };
        if (email) bodyObj.email = String(email).toLowerCase().trim();
        if (name) bodyObj.name = String(name).trim();
        if (subscriberId) bodyObj.subscriberId = subscriberId;

        const resp = await fetch(WORKER_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + jwt
            },
            body: JSON.stringify(bodyObj)
        });

        const text = await resp.text();
        let json = null;
        try { json = JSON.parse(text); } catch (e) { json = text; }

        return { httpStatus: resp.status, ok: resp.ok, raw: json };
    }

    // renderProfile: builds the DOM and wires handlers
    const renderProfile = (user: any) => {
        const profileArea = document.getElementById('profileArea');
        if (!profileArea) return;

        profileArea.innerHTML = `
            <div class="space-y-4">
                <form id="profileForm" class="space-y-4" novalidate>
                    <div>
                        <label for="nameInput" class="block text-sm font-medium text-gray-700">Name</label>
                        <input id="nameInput" name="name" type="text" value="${user.name || ''}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>

                    <div>
                        <label for="emailInput" class="block text-sm font-medium text-gray-700">Email</label>
                        <input id="emailInput" name="email" type="email" value="${user.email || ''}" disabled class="mt-1 block w-full rounded-md border-gray-200 bg-gray-50 text-gray-600" />
                    </div>

                    <div class="flex items-center gap-3">
                        <button id="saveBtn" type="submit" class="px-4 py-2 bg-primary-600 text-white rounded-md cursor-pointer" disabled>Save changes</button>
                        <span id="saveStatus" class="text-sm text-green-600 hidden">Saved</span>
                    </div>
                </form>
            </div>
        `;

        const profileForm = document.getElementById('profileForm') as HTMLFormElement | null;
        const nameInput = document.getElementById('nameInput') as HTMLInputElement | null;
        const emailInput = document.getElementById('emailInput') as HTMLInputElement | null;
        const saveBtn = document.getElementById('saveBtn') as HTMLButtonElement | null;
        const saveStatus = document.getElementById('saveStatus');

        let initialName = (user.name || '').trim();

        if (nameInput) {
            nameInput.focus();
            nameInput.addEventListener('input', () => {
                const changed = nameInput.value.trim() !== initialName;
                if (saveBtn) saveBtn.disabled = !changed;
                if (saveStatus) saveStatus.classList.add('hidden');
            });
        }

        if (profileForm && nameInput) {
            profileForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const newName = nameInput.value.trim();
                if (newName === initialName) return;

                if (saveBtn) {
                    saveBtn.disabled = true;
                    saveBtn.textContent = 'Saving...';
                }

                try {
                    await updateAccountName(newName);
                    const updatedUser = await getCurrentUser();
                    initialName = (updatedUser?.name || newName).trim();
                    showToast('success', 'Profile saved');
                } catch (err: any) {
                    console.error('Update failed', err);
                    showToast('error', err?.message || 'Failed to update profile');
                } finally {
                    if (saveBtn) {
                        saveBtn.textContent = 'Save changes';
                        saveBtn.disabled = true;
                    }
                }
            });
        }

        // Newsletter UI
        const existingNewsletter = document.getElementById('newsletterArea');
        let newsletterArea = existingNewsletter;
        if (!newsletterArea) {
            const newsletterWrapper = document.createElement('div');
            newsletterWrapper.className = 'mt-6';
            newsletterWrapper.innerHTML = `
                <p class="text-sm text-gray-500">Newsletter</p>
                <div id="newsletterArea" class="mt-2"></div>
            `;
            profileArea.appendChild(newsletterWrapper);
            newsletterArea = document.getElementById('newsletterArea');
        }

        const renderNewsletter = (prefs: any) => {
            if (!newsletterArea) return;
            const subscribed = !!(prefs && prefs.newsletter === true);
            if (subscribed) {
                newsletterArea.innerHTML = `
                    <div class="flex items-center justify-between bg-white p-3 rounded-md">
                        <div class="text-sm text-gray-700">You are subscribed to the newsletter.</div>
                        <button id="unsubscribeBtn" class="px-3 py-1 text-sm text-red-600 hover:underline cursor-pointer">Unsubscribe</button>
                    </div>
                `;
            } else {
                newsletterArea.innerHTML = `
                    <div class="flex items-center justify-between bg-white p-3 rounded-md">
                        <div class="text-sm text-gray-700">You're not subscribed to the newsletter.</div>
                        <button id="subscribeBtn" class="px-3 py-1 text-sm bg-primary-600 text-white rounded-md cursor-pointer">Subscribe</button>
                    </div>
                `;
            }

            const subscribeBtn = document.getElementById('subscribeBtn');
            const unsubscribeBtn = document.getElementById('unsubscribeBtn');

            if (subscribeBtn) {
                subscribeBtn.addEventListener('click', async () => {
                    try {
                        const emailVal = (emailInput && emailInput.value) ? emailInput.value : (user && user.email) ? user.email : null;
                        const nameVal = (nameInput && nameInput.value) ? nameInput.value : (user && user.name) ? user.name : null;
                        const result = await callMailerLite('subscribe', undefined, emailVal, nameVal);

                        const raw = result?.raw || {};
                        const emailErrors = raw?.errors?.email || null;
                        const unsubscribedBlocked = result?.httpStatus === 422 || (Array.isArray(emailErrors) && emailErrors.some((s: any) => /unsubscribed/i.test(String(s))));

                        if (unsubscribedBlocked) {
                            showToast('error', "To resubscribe, you'll need to contact us directly via the contact page.");
                            console.warn('MailerLite blocked re-subscribe:', raw);
                            return;
                        }

                        const sid = raw?.subscriberId || raw?.subscriber || raw?.data?.id || raw?.id || null;
                        if (sid) {
                            try { await updateAccountPreference('ml_subscriber_id', sid); } catch (e) { console.error('Failed to persist ml id', e); }
                        }
                        await updateAccountPreference('newsletter', true);
                        showToast('success', 'Subscribed to newsletter');
                        renderNewsletter({ newsletter: true });
                    } catch (err) {
                        console.error('Subscribe failed', err);
                        showToast('error', ((err as any) && ((err as any).message || (err as any).toString())) || 'Failed to subscribe');
                    }
                });
            }

            if (unsubscribeBtn) {
                unsubscribeBtn.addEventListener('click', async () => {
                    try {
                        // Best-effort: try reading prefs from the current user object
                        let subscriberId = null;
                        try {
                            const userObj = await getCurrentUser();
                            const p = userObj && ((userObj as any).prefs || (userObj as any).preferences || {});
                            subscriberId = p && (p.ml_subscriber_id || p.mlSubscriberId || null);
                        } catch (e) {
                            // ignore
                        }

                        const emailVal = (emailInput && emailInput.value) ? emailInput.value : (user && user.email) ? user.email : null;
                        const result = await callMailerLite('unsubscribe', subscriberId, emailVal);
                        await updateAccountPreference('newsletter', false);
                        showToast('success', 'Unsubscribed from newsletter');
                        renderNewsletter({ newsletter: false });
                    } catch (err) {
                        console.error('Unsubscribe failed', err);
                        showToast('error', ((err as any) && ((err as any).message || (err as any).toString())) || 'Failed to unsubscribe');
                    }
                });
            }
        };

        // Initialize newsletter area from user prefs
        try {
            const prefs = (user && user.prefs) ? user.prefs : (user && user.preferences) ? user.preferences : (user && user.$id ? user : null);
            renderNewsletter(prefs || {});
        } catch (err) {
            renderNewsletter({});
        }

        // Modal wiring for deletion confirmation
        const deleteTriggerBtn = document.getElementById('deleteTriggerBtn');
        const deleteModal = document.getElementById('deleteModal');
        const modalDangerInput = document.getElementById('modalDangerInput') as HTMLInputElement | null;
        const modalCancelBtn = document.getElementById('modalCancelBtn') as HTMLButtonElement | null;
        const modalConfirmBtn = document.getElementById('modalConfirmBtn') as HTMLButtonElement | null;

        const openModal = () => {
            if (deleteModal) deleteModal.classList.remove('hidden');
            if (modalDangerInput) {
                modalDangerInput.value = '';
                modalDangerInput.focus();
            }
            if (modalConfirmBtn) modalConfirmBtn.disabled = true;
        };

        const closeModal = () => {
            if (deleteModal) deleteModal.classList.add('hidden');
        };

        if (deleteTriggerBtn) {
            deleteTriggerBtn.addEventListener('click', (e) => {
                e.preventDefault();
                openModal();
            });
        }

        if (modalCancelBtn) {
            modalCancelBtn.addEventListener('click', (e) => {
                e.preventDefault();
                closeModal();
            });
        }

        if (modalDangerInput && modalConfirmBtn) {
            modalDangerInput.addEventListener('input', () => {
                modalConfirmBtn.disabled = modalDangerInput.value !== 'DELETE';
            });

            modalConfirmBtn.addEventListener('click', async () => {
                const confirm = window.confirm('This will permanently delete your account. Continue?');
                if (!confirm) return;
                try {
                    await deleteAccount();
                    showToast('success', 'Account deleted');
                    // small delay so toast can be seen
                    setTimeout(() => window.location.href = '/auth/login', 700);
                } catch (err) {
                    console.error('Delete failed', err);
                    showToast('error', 'Failed to delete account');
                }
            });
        }
    };

    (async () => {
        const user = await getCurrentUser();
        if (!user) {
            window.location.href = '/auth/login';
            return;
        }
        renderProfile(user);
    })();
</script>
