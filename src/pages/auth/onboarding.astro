---
import MainLayout from '../../layouts/MainLayout.astro';
---

<MainLayout title="Welcome">
  <div class="max-w-screen-md mx-auto px-4 py-16 lg:py-24">
    <div class="max-w-xl mx-auto">
      <div class="mb-6 text-center">
        <h1 class="mb-2 text-3xl tracking-tight font-extrabold text-gray-900 dark:text-white">Welcome to Giveback Guide</h1>
        <p class="text-base text-gray-500 dark:text-gray-400">A few quick questions to personalise your experience.</p>
      </div>

      <form id="onboardForm" class="space-y-6">
        <div>
          <label for="firstName" class="block text-sm font-medium text-gray-700 dark:text-gray-200">First name</label>
          <input id="firstName" name="name" type="text" required placeholder="Your first name" class="mt-1 block w-full text-sm rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-800 p-3" />
        </div>

        <div class="flex items-center gap-3">
          <input id="newsletter" name="newsletter" type="checkbox" class="w-4 h-4 text-primary-600 bg-gray-100 rounded border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800" />
          <label for="newsletter" class="text-sm text-gray-700 dark:text-gray-200">I'd like to receive the newsletter</label>
        </div>

        <div class="flex items-start gap-3">
          <input id="consent" name="consent" type="checkbox" required class="w-4 h-4 mt-1 text-primary-600 bg-gray-100 rounded border-gray-300" />
          <label for="consent" class="text-sm text-gray-700 dark:text-gray-200">I agree to the <a href="/terms" class="text-primary-600 hover:underline">Terms</a> and <a href="/privacy" class="text-primary-600 hover:underline">Privacy Policy</a></label>
        </div>

        <div>
          <button id="submitBtn" type="submit" class="w-full py-3 px-4 text-sm font-semibold text-white bg-primary-600 rounded-lg hover:bg-primary-700">Continue</button>
        </div>

        <div id="formMessage" class="mt-2 text-center text-sm hidden"></div>
      </form>
    </div>
  </div>
</MainLayout>

<script>
  import { account, getCurrentUser, updateAccountName, updateAccountPreference } from '../../lib/auth';

  const WORKER_URL = 'https://spring-block-2fcc.matt-c4f.workers.dev';

  const form = document.getElementById('onboardForm') as HTMLFormElement | null;
  const firstName = document.getElementById('firstName') as HTMLInputElement | null;
  const newsletter = document.getElementById('newsletter') as HTMLInputElement | null;
  const consent = document.getElementById('consent') as HTMLInputElement | null;
  const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement | null;
  // skip button removed from UI
  const formMessage = document.getElementById('formMessage') as HTMLElement | null;

  const showMessage = (msg: string, isError = false) => {
    if (!formMessage) return;
    formMessage.textContent = msg;
    formMessage.classList.remove('hidden');
    formMessage.classList.toggle('text-red-600', isError);
    formMessage.classList.toggle('text-green-600', !isError);
  };

  // Call MailerLite worker (same pattern as profile page)
  async function callMailerLite(action: 'subscribe' | 'unsubscribe', subscriberId: string | undefined = undefined, email: string | undefined = undefined, name: string | undefined = undefined) {
  const acc = await account();
  const jwtResp: any = await acc.createJWT();
  const jwt = jwtResp?.jwt;
  if (!jwt) throw new Error('Failed to create auth JWT');

    const bodyObj: any = { action };
    if (email) bodyObj.email = String(email).toLowerCase().trim();
    if (name) bodyObj.name = String(name).trim();
    if (subscriberId) bodyObj.subscriberId = subscriberId;

    const resp = await fetch(WORKER_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + jwt
      },
      body: JSON.stringify(bodyObj)
    });

    const text = await resp.text();
    try { return { httpStatus: resp.status, ok: resp.ok, raw: JSON.parse(text) }; } catch (e) { return { httpStatus: resp.status, ok: resp.ok, raw: text }; }
  }

  const saveProfileAndMaybeSubscribe = async (nameVal: string, subscribe: boolean) => {
    try {
  // Update name in auth provider
      await updateAccountName(nameVal);
      // Persist newsletter preference
      await updateAccountPreference('newsletter', !!subscribe);

      if (subscribe) {
        // Get current user email
        const user: any = await getCurrentUser();
        const email = user?.email as string | undefined;

        if (!email) {
          showMessage('Saved, but we could not subscribe you because your email was not available client-side. You can subscribe later in your profile.', true);
        } else {
          try {
            const result: any = await callMailerLite('subscribe', undefined, email, nameVal);
            if (!result || !result.ok) {
              console.error('MailerLite subscribe failed', result);
              showMessage('Saved, but newsletter subscription failed. You can update this later in your profile.', true);
            } else {
              const raw = result.raw || {};
              const sid = raw?.subscriberId || raw?.subscriber || raw?.data?.id || raw?.id || null;
              if (sid) {
                try { await updateAccountPreference('ml_subscriber_id', sid); } catch (e) { console.error('Failed to persist ml id', e); }
              }
              showMessage('Subscribed to the newsletter. Redirecting...', false);
            }
          } catch (e: any) {
            console.error('MailerLite subscribe failed', e);
            showMessage('Saved, but newsletter subscription failed. You can update this later in your profile.', true);
          }
        }
      }

  // no-op: profiles upsert removed per configuration

      showMessage('Profile saved. Verifying and redirecting...', false);

      // Wait for the auth provider to reflect updated metadata (avoid race)
      const start = Date.now();
      const timeoutMs = 5000;
      let verified = false;
      while (Date.now() - start < timeoutMs) {
        try {
          const latest = await getCurrentUser();
          if (latest && latest.name && String(latest.name).trim() === String(nameVal).trim()) {
            verified = true;
            break;
          }
        } catch (e) {
          // ignore transient errors
        }
        // small delay
        await new Promise((r) => setTimeout(r, 250));
      }

      if (!verified) {
        console.warn('Profile update not yet reflected in auth session after save; proceeding to dashboard anyway');
      }

      setTimeout(() => window.location.href = '/auth/dashboard', 400);
    } catch (err: any) {
      console.error('Onboarding save failed', err);
      showMessage((err && err.message) ? err.message : 'Failed to save profile', true);
    }
  };

  // Ensure user is authenticated; if not, send back to login
  (async () => {
    const user: any = await getCurrentUser();
    if (!user) {
      window.location.href = '/auth/login';
      return;
    }

  // Diagnostics: log the user object we received client-side
  console.debug('Onboarding loaded user:', user);

  // Prefill if name already present
  if (user.name && firstName) (firstName as HTMLInputElement).value = user.name;

    // If user already has preferences set and name present, skip onboarding
    const prefs = (user as any).prefs || (user as any).preferences || {};
    if ((user.name && String(user.name).trim()) && (prefs && typeof prefs.newsletter !== 'undefined')) {
      // Already onboarded
      window.location.href = '/auth/dashboard';
      return;
    }
  })();

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      if (!consent || !(consent as HTMLInputElement).checked) {
        showMessage('You must agree to the terms and privacy policy to continue.', true);
        return;
      }

      const nameVal = firstName ? String((firstName as HTMLInputElement).value).trim() : '';
      if (!nameVal) {
        showMessage('Please enter your first name', true);
        return;
      }

      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Saving...';
      }

      await saveProfileAndMaybeSubscribe(nameVal, !!(newsletter && (newsletter as HTMLInputElement).checked));

      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Continue';
      }
    });
  }

  // skip button removed
</script>
