---
import MainLayout from '../../layouts/MainLayout.astro';
---

<MainLayout title="Dashboard">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="p-6"> <!-- flattened container: removed border/background/shadow -->
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-4">
                <div class="flex items-center gap-4">
                    <div class="rounded-full overflow-hidden w-12 h-12 bg-gray-100 flex items-center justify-center">
                        <!-- avatar populated by JS -->
                        <img id="userAvatar" alt="avatar" class="w-full h-full object-cover hidden" />
                        <svg id="userAvatarPlaceholder" class="w-6 h-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11c1.657 0 3-1.343 3-3S17.657 5 16 5s-3 1.343-3 3 1.343 3 3 3zM4 21v-1a4 4 0 014-4h8a4 4 0 014 4v1" />
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-2xl font-semibold" id="dashTitle">Dashboard</h1>
                        <a id="dashSubtitle" href="/auth/profile" class="text-sm text-gray-500 hover:underline">Edit your profile</a>
                    </div>
                </div>

                <div class="flex items-center gap-3">
                    <button id="logoutBtn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 cursor-pointer">Logout</button>
                </div>
            </div>
            <div class="mb-6">
                <div class="p-4 bg-gray-50 rounded-lg">
                    <!-- Stats row -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div class="p-4 bg-white rounded-lg flex items-center justify-between">
                            <div>
                                <p class="text-sm text-gray-500">Saved items</p>
                                <div class="mt-2 text-2xl font-bold" id="savedCount">—</div>
                            </div>
                            <div class="text-sm text-gray-400">Projects & Stays</div>
                        </div>

                        <div class="p-4 bg-white rounded-lg flex items-center justify-between">
                            <div>
                                <p class="text-sm text-gray-500">Lists</p>
                                <div class="mt-2 text-2xl font-bold" id="listsCount">—</div>
                            </div>
                            <div class="text-sm text-gray-400">Custom collections</div>
                        </div>
                    </div>

                    <!-- My Lists section -->
                    <div class="mt-6">
                        <div class="flex items-center justify-between mb-3">
                            <div>
                                <h3 class="text-lg font-semibold">My Lists</h3>
                                <p class="text-sm text-gray-500">Create lists to save projects and stays for later.</p>
                            </div>
                            <div class="flex items-center gap-2">
                                <button id="createListBtn" class="px-3 py-2 bg-primary-600 text-white rounded-md cursor-pointer">Create new list</button>
                            </div>
                        </div>

                        <!-- Create form (hidden by default) -->
                        <div id="newListForm" class="hidden mb-4">
                            <div class="flex gap-2">
                                <input id="newListName" type="text" placeholder="List name" class="flex-1 px-3 py-2 border rounded-md" />
                                <button id="addListBtn" class="px-3 py-2 bg-green-600 text-white rounded-md cursor-pointer">Add</button>
                                <button id="cancelListBtn" class="px-3 py-2 bg-gray-200 rounded-md cursor-pointer">Cancel</button>
                            </div>
                        </div>

                        <!-- Lists placeholder -->
                        <div id="listsContainer" class="space-y-3">
                            <div class="p-4 bg-white rounded-lg border border-dashed border-gray-200 text-sm text-gray-500">You don't have any lists yet. Create one to get started.</div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="userInfo" class="prose prose-sm text-sm text-gray-700">
                Loading...
            </div>
        </div>
    </div>
</MainLayout>

<script>
    import { getCurrentUser, logout } from '../../lib/auth';

    // Check if user is logged in
    const checkAuth = async () => {
        const user = await getCurrentUser();
            console.debug('Dashboard auth check user:', user);
            if (!user) {
                console.debug('No user found - redirecting to login');
                window.location.href = '/auth/login';
                return;
            }

        const userInfo = document.getElementById('userInfo');
        if (userInfo) {
            // populate profile summary and header greeting
            const dashSubtitle = document.getElementById('dashSubtitle');
            const dashTitle = document.getElementById('dashTitle');

            // Title: personalise when we have a name
            if (dashTitle) dashTitle.textContent = user.name ? `Hi, ${user.name}` : 'Dashboard';

            // Subtitle: ensure it links to profile (markup already set)
            if (dashSubtitle) dashSubtitle.textContent = 'Edit profile';

            // Fill userInfo with useful summary and a profile action
            userInfo.innerHTML = `
                <div class="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
                    <div>
                        <p class="text-sm text-gray-500">Signed in as</p>
                        <p class="text-base font-medium text-gray-900">${user.name || user.email || 'Member'}</p>
                        <p class="text-sm text-gray-500">${user.email || ''}</p>
                    </div>
                    <div class="flex items-center gap-2">
                        <a href="/auth/profile" class="px-3 py-2 bg-primary-600 text-white rounded-md cursor-pointer">Edit profile</a>
                    </div>
                </div>
            `;

            // Edit moved to the dedicated profile page; no inline edit here.

            // Danger zone moved to profile page; no delete handlers here.
        }
    };

    // Handle logout
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', async () => {
            try {
                await logout();
                window.location.href = '/auth/login';
            } catch (error) {
                console.error('Logout failed:', error);
            }
        });
    }

    // (profile and delete handlers attached after DOM is populated in checkAuth)

    // Check auth on page load
    checkAuth();

    // --- Client-side lists UI (placeholders) ---
    const createListBtn = document.getElementById('createListBtn');
    const newListForm = document.getElementById('newListForm');
    const cancelListBtn = document.getElementById('cancelListBtn');
    const addListBtn = document.getElementById('addListBtn');
    const newListName = document.getElementById('newListName');
    const listsContainer = document.getElementById('listsContainer');
    const listsCount = document.getElementById('listsCount');
    const savedCount = document.getElementById('savedCount');

    // Initial placeholder counts
    if (listsCount) listsCount.textContent = '0';
    if (savedCount) savedCount.textContent = '0';

    if (createListBtn) {
        createListBtn.addEventListener('click', () => {
            newListForm?.classList.remove('hidden');
            (newListName as HTMLInputElement)?.focus();
        });
    }

    if (cancelListBtn) {
        cancelListBtn.addEventListener('click', () => {
            newListForm?.classList.add('hidden');
            (newListName as HTMLInputElement).value = '';
        });
    }

    if (addListBtn) {
        addListBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const name = (newListName as HTMLInputElement).value.trim();
            if (!name) return;

            // Add placeholder list item
            const el = document.createElement('div');
            el.className = 'p-4 bg-white rounded-lg flex items-center justify-between';
            el.innerHTML = `
                <div>
                    <div class="font-medium">${name}</div>
                    <div class="text-sm text-gray-500">0 items</div>
                </div>
                <div>
                    <a href="#" class="text-primary-600 hover:underline cursor-pointer">View</a>
                </div>
            `;

            // If first placeholder message exists, remove it
            if (listsContainer) {
                const firstChild = listsContainer.querySelector('div');
                if (firstChild && firstChild.classList.contains('border-dashed')) {
                    listsContainer.innerHTML = '';
                }
                listsContainer.appendChild(el);

                // Update counts (placeholders)
                const current = parseInt(listsCount?.textContent || '0', 10) || 0;
                if (listsCount) listsCount.textContent = String(current + 1);
            }

            // reset form
            (newListName as HTMLInputElement).value = '';
            newListForm?.classList.add('hidden');
        });
    }
</script>
