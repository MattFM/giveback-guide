---
import MainLayout from '../../layouts/MainLayout.astro';
---

<MainLayout title="Dashboard">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="p-6"> <!-- flattened container: removed border/background/shadow -->
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-4">
                <div class="flex items-center gap-4">
                    <div class="rounded-full overflow-hidden w-12 h-12 bg-gray-100 flex items-center justify-center">
                        <!-- avatar populated by JS -->
                        <img id="userAvatar" alt="avatar" class="w-full h-full object-cover hidden" />
                        <svg id="userAvatarPlaceholder" class="w-6 h-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11c1.657 0 3-1.343 3-3S17.657 5 16 5s-3 1.343-3 3 1.343 3 3 3zM4 21v-1a4 4 0 014-4h8a4 4 0 014 4v1" />
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-2xl font-semibold" id="dashTitle">Dashboard</h1>
                        <a id="dashSubtitle" href="/auth/profile" class="text-sm text-gray-500 hover:underline">Edit your profile</a>
                    </div>
                </div>

                <div class="flex items-center gap-3">
                    <button id="logoutBtn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 cursor-pointer">Logout</button>
                </div>
            </div>
            <div class="mb-6">
                <div class="p-3 sm:p-4 bg-gray-50 rounded-lg">
                    <!-- Stats row -->
                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4">
                        <div class="p-3 sm:p-4 bg-white rounded-lg flex items-center justify-between">
                            <div>
                                <p class="text-xs sm:text-sm text-gray-500">Saved items</p>
                                <div class="mt-1 sm:mt-2 text-xl sm:text-2xl font-bold" id="savedCount">—</div>
                            </div>
                            <div class="hidden sm:block text-sm text-gray-400">Projects & Stays</div>
                        </div>

                        <div class="p-3 sm:p-4 bg-white rounded-lg flex items-center justify-between">
                            <div>
                                <p class="text-xs sm:text-sm text-gray-500">Lists</p>
                                <div class="mt-1 sm:mt-2 text-xl sm:text-2xl font-bold" id="listsCount">—</div>
                            </div>
                            <div class="hidden sm:block text-sm text-gray-400">Custom collections</div>
                        </div>

                        <div class="p-3 sm:p-4 bg-white rounded-lg flex items-center justify-between">
                            <div>
                                <p class="text-xs sm:text-sm text-gray-500">Completed</p>
                                <div class="mt-1 sm:mt-2 text-xl sm:text-2xl font-bold" id="completedCount">—</div>
                            </div>
                            <div class="hidden sm:block text-sm text-gray-400">Done items</div>
                        </div>
                    </div>

                </div>

                <!-- My Lists section (separate box) -->
                <div class="p-3 sm:p-4 bg-gray-50 rounded-lg mt-6">
                        <div class="flex items-center justify-between mb-3 gap-3">
                            <div>
                                <h3 class="text-lg font-semibold">My Lists</h3>
                                <p class="text-sm text-gray-500">Create lists to save projects and stays for later.</p>
                                <div class="mt-2 sm:hidden">
                                    <button id="hideDoneChipMobile" aria-pressed="false" class="inline-flex items-center px-3 py-1.5 rounded-full border border-gray-300 text-gray-700 bg-white hover:bg-gray-50 text-sm cursor-pointer">Hide done</button>
                                </div>
                            </div>
                            <div class="flex items-center gap-2">
                                <button id="hideDoneChip" aria-pressed="false" class="hidden sm:inline-flex items-center px-3 py-1.5 rounded-full border border-gray-300 text-gray-700 bg-white hover:bg-gray-50 text-sm cursor-pointer">Hide done</button>
                                <button id="createListBtn" aria-label="Create new list" title="Create new list" class="px-3 py-2 bg-primary-600 text-white rounded-md cursor-pointer inline-flex items-center gap-2">
                                    <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" aria-hidden="true">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                    </svg>
                                    <span>New</span>
                                </button>
                            </div>
                        </div>

                        <!-- New List Modal / Bottom Sheet -->
                        <div id="newListModal" class="fixed inset-0 z-50 hidden">
                            <div id="newListOverlay" class="absolute inset-0 bg-black/40"></div>
                            <div class="absolute inset-x-0 bottom-0 sm:inset-0 sm:flex sm:items-center sm:justify-center">
                                <div class="bg-white rounded-t-xl sm:rounded-xl shadow-lg w-full sm:max-w-md p-4 sm:p-6">
                                    <div class="mb-3">
                                        <h3 class="text-base font-semibold">Create new list</h3>
                                        <p class="text-sm text-gray-500">Add a name to get started.</p>
                                    </div>
                                    <div class="space-y-3">
                                        <input id="newListNameInput" type="text" placeholder="E.g., Weekend ideas" class="w-full px-3 py-2 border rounded-md" />
                                        <div class="flex justify-end gap-2">
                                            <button id="newListCancelBtn" class="px-3 py-2 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200">Cancel</button>
                                            <button id="newListCreateBtn" class="px-3 py-2 rounded-md bg-primary-600 text-white hover:bg-primary-700">Create</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Lists placeholder -->
                        <div id="listsContainer" class="space-y-3">
                            <div class="p-4 bg-white rounded-lg border border-dashed border-gray-200 text-sm text-gray-500">You don't have any lists yet. Create one to get started.</div>
                        </div>
                </div>

            <!-- Recently completed (separate shaded box) -->
            <div class="p-3 sm:p-4 bg-gray-50 rounded-lg mt-6 mb-6" id="recentCompletedBox" hidden>
                <div class="flex items-center justify-between mb-3">
                    <h3 id="recentCompletedTitle" class="text-lg font-semibold cursor-pointer">Recently completed</h3>
                    <button id="recentCompletedToggle" aria-expanded="false" aria-label="Expand section" class="p-1 text-gray-600 hover:text-gray-800 rounded cursor-pointer">
                        <svg class="w-4 h-4 transition-transform rotate-180" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.25a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
                <div id="recentCompletedContent" class="hidden">
                    <div id="recentCompleted" class="grid grid-cols-1 sm:grid-cols-2 gap-3"></div>
                </div>
            </div>

            <div id="userInfo" class="prose prose-sm text-sm text-gray-700">
                Loading...
            </div>
        </div>
    </div>
</MainLayout>

<script>
    import { getCurrentUser, logout } from '../../lib/auth';
    import { getListsWithItems, getSavedCounts, createList, removeItemFromList, deleteList, renameList, setDefaultList, saveItemToList } from '../../lib/lists';
    import { getCompletedCount, getRecentCompleted, getStatusesForItems, setCompleted } from '../../lib/completed';

    // Check if user is logged in
    const checkAuth = async () => {
        const user = await getCurrentUser();
            console.debug('Dashboard auth check user:', user);
            if (!user) {
                console.debug('No user found - redirecting to login');
                window.location.href = '/auth/login';
                return;
            }

        const userInfo = document.getElementById('userInfo');
        if (userInfo) {
            // populate profile summary and header greeting
            const dashSubtitle = document.getElementById('dashSubtitle');
            const dashTitle = document.getElementById('dashTitle');

            // Title: personalise when we have a name
            if (dashTitle) dashTitle.textContent = user.name ? `Hi, ${user.name}` : 'Dashboard';

            // Subtitle: ensure it links to profile (markup already set)
            if (dashSubtitle) dashSubtitle.textContent = 'Edit profile';

            // Fill userInfo with useful summary and a profile action
            userInfo.innerHTML = `
                <div class="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
                    <div>
                        <p class="text-sm text-gray-500">Signed in as</p>
                        <p class="text-base font-medium text-gray-900">${user.name || user.email || 'Member'}</p>
                        <p class="text-sm text-gray-500">${user.email || ''}</p>
                    </div>
                    <div class="flex items-center gap-2">
                        <a href="/auth/profile" class="px-3 py-2 bg-primary-600 text-white rounded-md cursor-pointer">Edit profile</a>
                    </div>
                </div>
            `;

            // Edit moved to the dedicated profile page; no inline edit here.

            // Danger zone moved to profile page; no delete handlers here.
        }
    };

    // Handle logout
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', async () => {
            try {
                await logout();
                window.location.href = '/auth/login';
            } catch (error) {
                console.error('Logout failed:', error);
            }
        });
    }

    // (profile and delete handlers attached after DOM is populated in checkAuth)

    // Check auth on page load
    checkAuth();

    // --- Client-side lists UI (real data) ---
    const createListBtn = document.getElementById('createListBtn');
    let modalKeydownHandler: ((e: KeyboardEvent) => void) | null = null;
    let lastFocusedBeforeModal: HTMLElement | null = null;
    const newListModal = document.getElementById('newListModal');
    const newListOverlay = document.getElementById('newListOverlay');
    const newListNameInput = document.getElementById('newListNameInput') as HTMLInputElement | null;
    const newListCreateBtn = document.getElementById('newListCreateBtn');
    const newListCancelBtn = document.getElementById('newListCancelBtn');
    const listsContainer = document.getElementById('listsContainer');
    const listsCount = document.getElementById('listsCount');
    const savedCount = document.getElementById('savedCount');
    const completedCountEl = document.getElementById('completedCount');
    const recentCompletedBox = document.getElementById('recentCompletedBox');
    const recentCompletedContent = document.getElementById('recentCompletedContent');
    const recentCompletedEl = document.getElementById('recentCompleted');
    const recentCompletedToggle = document.getElementById('recentCompletedToggle');
    const recentCompletedTitle = document.getElementById('recentCompletedTitle');
    const hideDoneChip = document.getElementById('hideDoneChip');
    const hideDoneChipMobile = document.getElementById('hideDoneChipMobile');

    // State
    let lists = [] as any[];
    let indexByKey: Record<string, any> = {};
    let statusByKey: Record<string, any> = {};
    const HIDE_COMPLETED_LS = 'dashHideCompleted';
    let hideCompleted = false;
    try { hideCompleted = localStorage.getItem(HIDE_COMPLETED_LS) === '1'; } catch(_) {}

    function applyHideDoneVisual(){
        const on = 'bg-primary-600 text-white border border-primary-600 hover:bg-primary-700';
        const off = 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50';
        // Desktop chip: only visible at sm+; never include plain inline-flex so it stays hidden on mobile
        if (hideDoneChip) {
            hideDoneChip.setAttribute('aria-pressed', hideCompleted ? 'true' : 'false');
            hideDoneChip.className = `hidden sm:inline-flex items-center px-3 py-1.5 rounded-full text-sm cursor-pointer ${hideCompleted ? on : off}`;
        }
        // Mobile chip: only visible below sm
        if (hideDoneChipMobile) {
            hideDoneChipMobile.setAttribute('aria-pressed', hideCompleted ? 'true' : 'false');
            hideDoneChipMobile.className = `inline-flex sm:hidden items-center px-3 py-1.5 rounded-full text-sm cursor-pointer ${hideCompleted ? on : off}`;
        }
    }
    applyHideDoneVisual();

    function idKeysFor(type: 'project' | 'stay', id: string){ return [`${type}:${id}`]; }

    function renderLists(){
        if (!listsContainer) return;
        if (!lists || lists.length === 0){
            listsContainer.innerHTML = '<div class="p-4 bg-white rounded-lg border border-dashed border-gray-200 text-sm text-gray-500">You don\'t have any lists yet. Create one to get started.</div>';
            if (listsCount) listsCount.textContent = '0';
            if (savedCount) savedCount.textContent = '0';
            return;
        }
        listsContainer.innerHTML = '';
        let totalItems = 0;
        lists.forEach(l => { totalItems += (l.items?.length || 0); });
        if (listsCount) listsCount.textContent = String(lists.length);
        if (savedCount) savedCount.textContent = String(totalItems);

        const frag = document.createDocumentFragment();
                lists.forEach(l => {
            const wrap = document.createElement('div');
                        wrap.className = 'p-4 bg-white rounded-lg';
            wrap.setAttribute('data-list-id', l.id);
            const count = l.items?.length || 0;
        const lsKey = `dashListCollapsed:${l.id}`;
        let initialCollapsed = false;
        if (typeof localStorage !== 'undefined') {
            const saved = localStorage.getItem(lsKey);
            if (saved !== null) {
                initialCollapsed = saved === '1';
            } else {
                // Default collapsed on small screens on first visit
                try {
                    initialCollapsed = window.matchMedia && window.matchMedia('(max-width: 640px)').matches;
                } catch {}
            }
        }
                        wrap.innerHTML = `
                <div class="flex items-center justify-between">
                    <div>
                                                <div class="font-medium cursor-pointer" data-list-title>${l.title}${l.is_default ? ' <span class="text-xs text-gray-500">(default)</span>' : ''}</div>
                        <div class="text-sm text-gray-500">${count} item${count===1?'':'s'}</div>
                    </div>
                    <div class="flex items-center gap-1 sm:gap-2 relative">
                        <div class="relative">
                            <button data-menu-toggle="${l.id}" aria-haspopup="menu" aria-expanded="false" aria-label="List options" class="p-1 text-gray-600 hover:text-gray-800 rounded cursor-pointer">
                                <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path d="M10 3a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm0 5.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM10 14a1.5 1.5 0 110 3 1.5 1.5 0 010-3z" />
                                </svg>
                            </button>
                            <div data-menu="${l.id}" role="menu" class="hidden absolute right-0 mt-2 w-40 bg-white border rounded-md overflow-hidden shadow-lg z-10">
                                <button role="menuitem" data-action-rename="${l.id}" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-50">Rename</button>
                                ${l.is_default ? '' : `<button role="menuitem" data-action-default="${l.id}" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-50">Set as default</button>`}
                                <button role="menuitem" data-action-delete="${l.id}" class="w-full text-left px-3 py-2 text-sm text-red-600 hover:bg-red-50">Delete</button>
                            </div>
                        </div>
                                                                        <button data-toggle-list="${l.id}" aria-expanded="${initialCollapsed ? 'false' : 'true'}" aria-label="${initialCollapsed ? 'Expand list' : 'Collapse list'}" class="p-1 text-gray-600 hover:text-gray-800 rounded cursor-pointer">
                                                    <svg class="w-4 h-4 transition-transform ${initialCollapsed ? 'rotate-180' : ''}" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.25a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd" />
                                                    </svg>
                                                </button>
                    </div>
                </div>
        <div class="mt-3 space-y-4 ${initialCollapsed ? 'hidden' : ''}" data-items></div>
            `;
            const itemsHost = wrap.querySelector('[data-items]');
            const todo: any[] = [];
            const done: any[] = [];
            (l.items || []).forEach((item: any) => {
                const key = `${item.item_type}:${item.item_id}`;
                const st = statusByKey[key];
                (st && st.is_completed) ? done.push(item) : todo.push(item);
            });

            const renderRow = (item: any, isDone: boolean) => {
                const meta = indexByKey[`${item.item_type}:${item.item_id}`] || null;
                const title = meta?.title || `${item.item_type} ${item.item_id}`;
                const url = meta?.url || (item.item_type === 'project' ? `/projects/${item.item_id}` : `/stays/${item.item_id}`);
                const row = document.createElement('div');
                row.className = `flex items-center justify-between border rounded-md px-3 py-2 ${isDone ? 'bg-gray-50' : ''}`;
                const key = `${item.item_type}:${item.item_id}`;
                row.innerHTML = `
                    <div class="flex items-center gap-3 min-w-0">
                        <input type="checkbox" data-toggle-done data-type="${item.item_type}" data-id="${item.item_id}" ${isDone ? 'checked' : ''}
                               aria-label="Mark as done: ${title}"
                               class="w-4 h-4 shrink-0 rounded border-gray-300 text-primary-600 focus:ring-primary-500" />
                        ${meta?.image ? `<img src="${meta.image}" alt="" class="w-10 h-10 rounded object-cover"/>` :
                        `<div class="w-10 h-10 rounded bg-gray-100 flex items-center justify-center text-xs text-gray-500">${item.item_type}</div>`}
                        <a class="font-medium hover:underline truncate ${isDone ? 'line-through text-gray-500' : ''}" href="${url}">${title}</a>
                    </div>
                    <div class="flex items-center gap-2 sm:gap-3 relative">
                        <span class="hidden sm:inline text-xs text-gray-400">${new Date(item.added_at).toLocaleDateString?.() || ''}</span>
                        <div class="relative">
                            <button data-item-menu-toggle="${key}" aria-haspopup="menu" aria-expanded="false" aria-label="Item options" class="p-1 text-gray-600 hover:text-gray-800 rounded cursor-pointer">
                                <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path d="M10 3a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm0 5.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM10 14a1.5 1.5 0 110 3 1.5 1.5 0 010-3z" />
                                </svg>
                            </button>
                            <div data-item-menu="${key}" role="menu" class="hidden absolute right-0 mt-2 w-44 bg-white border rounded-md overflow-hidden shadow-lg z-10">
                                <button role="menuitem" data-item-action-visit="${key}" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-50">View details</button>
                                <button role="menuitem" data-item-action-move-toggle="${key}" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-50">Move to…</button>
                                <div data-item-move-menu="${key}" class="hidden border-t py-1"></div>
                                <button role="menuitem" data-item-action-remove data-list="${l.id}" data-type="${item.item_type}" data-id="${item.item_id}" class="w-full text-left px-3 py-2 text-sm text-red-600 hover:bg-red-50">Remove</button>
                            </div>
                        </div>
                    </div>
                `;

                // Bind item menu handlers
                const menuToggle = row.querySelector(`button[data-item-menu-toggle="${key}"]`);
                const menu = row.querySelector(`div[data-item-menu="${key}"]`);
                if (menuToggle && menu) {
                    const closeMenu = () => { (menu as HTMLElement).classList.add('hidden'); (menuToggle as HTMLButtonElement).setAttribute('aria-expanded','false'); };
                    const openMenu = () => { (menu as HTMLElement).classList.remove('hidden'); (menuToggle as HTMLButtonElement).setAttribute('aria-expanded','true'); };
                    menuToggle.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const isOpen = !(menu as HTMLElement).classList.contains('hidden');
                        isOpen ? closeMenu() : openMenu();
                    });
                    const onDocClick = (evt: MouseEvent) => {
                        if ((menu as HTMLElement).classList.contains('hidden')) return;
                        if (!row.contains(evt.target as Node)) closeMenu();
                    };
                    document.addEventListener('click', onDocClick);
                    row.addEventListener('keydown', (ke: KeyboardEvent) => { if (ke.key === 'Escape') closeMenu(); });

                    // View details
                    const visitBtn = row.querySelector(`button[data-item-action-visit="${key}"]`);
                    if (visitBtn) visitBtn.addEventListener('click', () => { closeMenu(); window.location.href = url; });

                    // Move to… submenu
                    const moveToggle = row.querySelector(`button[data-item-action-move-toggle="${key}"]`);
                    const moveMenu = row.querySelector(`div[data-item-move-menu="${key}"]`);
                    if (moveToggle && moveMenu) {
                        const others = (lists || []).filter((ol: any) => ol.id !== l.id);
                        if (!others.length) {
                            (moveToggle as HTMLButtonElement).disabled = true;
                            (moveToggle as HTMLButtonElement).classList.add('text-gray-300','cursor-not-allowed');
                        } else {
                            // build buttons
                            (moveMenu as HTMLElement).innerHTML = '';
                            others.forEach((ol: any) => {
                                const b = document.createElement('button');
                                b.setAttribute('role','menuitem');
                                b.className = 'w-full text-left px-3 py-2 text-sm hover:bg-gray-50';
                                b.textContent = ol.title || 'Untitled';
                                b.addEventListener('click', async () => {
                                    closeMenu();
                                    try {
                                        await saveItemToList(ol.id, item.item_type, item.item_id);
                                        await removeItemFromList(l.id, item.item_type, item.item_id);
                                        await loadAndRender();
                                    } catch (e) { console.error('Move failed', e); }
                                });
                                (moveMenu as HTMLElement).appendChild(b);
                            });
                            // toggle visibility
                            (moveToggle as HTMLButtonElement).addEventListener('click', (evt) => {
                                evt.stopPropagation();
                                (moveMenu as HTMLElement).classList.toggle('hidden');
                            });
                        }
                    }

                    // Remove
                    const removeBtn = row.querySelector('button[data-item-action-remove]');
                    if (removeBtn) {
                        removeBtn.addEventListener('click', async () => {
                            closeMenu();
                            const listId = (removeBtn as HTMLButtonElement).getAttribute('data-list');
                            const type = (removeBtn as HTMLButtonElement).getAttribute('data-type') as 'project' | 'stay' | null;
                            const id = (removeBtn as HTMLButtonElement).getAttribute('data-id');
                            if (!listId || !type || !id) return;
                            const ok = window.confirm('Remove this item from the list?');
                            if (!ok) return;
                            try {
                                await removeItemFromList(listId, type, id);
                                await loadAndRender();
                            } catch (e) { console.error('Remove item failed', e); }
                        });
                    }
                }
                return row;
            };

            // To do section
            if (todo.length) {
                const sec = document.createElement('div');
                sec.innerHTML = `<div class="text-sm font-semibold text-gray-700">To do <span class="text-gray-400">(${todo.length})</span></div>`;
                const list = document.createElement('div');
                list.className = 'mt-2 space-y-2';
                todo.forEach((it: any) => list.appendChild(renderRow(it, false)));
                sec.appendChild(list);
                itemsHost?.appendChild(sec);
            }

            // Completed section (optional)
            if (!hideCompleted && done.length) {
                const sec = document.createElement('div');
                sec.innerHTML = `<div class="text-sm font-semibold text-gray-700">Completed <span class="text-gray-400">(${done.length})</span></div>`;
                const list = document.createElement('div');
                list.className = 'mt-2 space-y-2';
                done.forEach((it: any) => list.appendChild(renderRow(it, true)));
                sec.appendChild(list);
                itemsHost?.appendChild(sec);
            }
                        // menu toggle
                        const menuToggle = wrap.querySelector(`button[data-menu-toggle="${l.id}"]`);
                        const menu = wrap.querySelector(`div[data-menu="${l.id}"]`);
                        const closeMenu = () => { menu?.classList.add('hidden'); (menuToggle as HTMLButtonElement)?.setAttribute('aria-expanded','false'); };
                        const openMenu = () => { menu?.classList.remove('hidden'); (menuToggle as HTMLButtonElement)?.setAttribute('aria-expanded','true'); };
                        if (menuToggle && menu) {
                            menuToggle.addEventListener('click', (e) => {
                                e.stopPropagation();
                                const isOpen = !(menu as HTMLElement).classList.contains('hidden');
                                isOpen ? closeMenu() : openMenu();
                            });
                            // click outside to close
                            document.addEventListener('click', (evt) => {
                                if (!menu || (menu as HTMLElement).classList.contains('hidden')) return;
                                if (!(wrap as HTMLElement).contains(evt.target as Node)) closeMenu();
                            });
                            // escape to close
                            wrap.addEventListener('keydown', (ke: KeyboardEvent) => {
                                if (ke.key === 'Escape') { closeMenu(); }
                            });
                        }

                        // menu actions
                        const renameBtn = wrap.querySelector(`button[data-action-rename="${l.id}"]`);
                        if (renameBtn) {
                            renameBtn.addEventListener('click', async () => {
                                closeMenu();
                                const current = l.title || '';
                                const next = window.prompt('Rename list', current);
                                if (next === null) return;
                                const title = next.trim();
                                if (!title || title === current) return;
                                try {
                                    await renameList(l.id, title);
                                    await loadAndRender();
                                } catch (e) { console.error('Rename failed', e); }
                            });
                        }
                        const defaultBtn = wrap.querySelector(`button[data-action-default="${l.id}"]`);
                        if (defaultBtn) {
                            defaultBtn.addEventListener('click', async () => {
                                closeMenu();
                                try {
                                    await setDefaultList(l.id);
                                    await loadAndRender();
                                } catch (e) { console.error('Set default failed', e); }
                            });
                        }
                        const delBtn = wrap.querySelector(`button[data-action-delete="${l.id}"]`);
                        if (delBtn) {
                            delBtn.addEventListener('click', async () => {
                                closeMenu();
                                const ok = window.confirm('Delete this list? All items in it will also be removed. This cannot be undone.');
                                if (!ok) return;
                                try {
                                    await deleteList(l.id);
                                    await loadAndRender();
                                } catch (e) { console.error('Delete list failed', e); }
                            });
                        }

                        // bind collapse/expand toggle
                        const toggleBtn = wrap.querySelector('button[data-toggle-list]');
                        const titleEl = wrap.querySelector('[data-list-title]');
                        const doToggle = () => {
                            const isHidden = itemsHost?.classList.contains('hidden');
                            const icon = toggleBtn?.querySelector('svg');
                            if (isHidden) {
                                itemsHost?.classList.remove('hidden');
                                (toggleBtn as HTMLButtonElement)?.setAttribute('aria-expanded', 'true');
                                (toggleBtn as HTMLButtonElement)?.setAttribute('aria-label', 'Collapse list');
                                icon?.classList.remove('rotate-180');
                                try { localStorage.setItem(lsKey, '0'); } catch(_) {}
                            } else {
                                itemsHost?.classList.add('hidden');
                                (toggleBtn as HTMLButtonElement)?.setAttribute('aria-expanded', 'false');
                                (toggleBtn as HTMLButtonElement)?.setAttribute('aria-label', 'Expand list');
                                icon?.classList.add('rotate-180');
                                try { localStorage.setItem(lsKey, '1'); } catch(_) {}
                            }
                        };
                        if (toggleBtn) {
                            toggleBtn.addEventListener('click', doToggle);
                        }
                        if (titleEl) {
                            titleEl.addEventListener('click', doToggle);
                        }
            frag.appendChild(wrap);
        });
        listsContainer.appendChild(frag);

                // (remove handled via per-item menu above)

                // delegate toggle done via checkbox
                listsContainer.querySelectorAll('input[type="checkbox"][data-toggle-done]').forEach((cb) => {
                    cb.addEventListener('change', async () => {
                        const type = (cb as HTMLInputElement).getAttribute('data-type') as 'project' | 'stay' | null;
                        const id = (cb as HTMLInputElement).getAttribute('data-id');
                        const next = (cb as HTMLInputElement).checked;
                        if (!type || !id) return;
                        try {
                            await setCompleted(type, id, next, 'dashboard');
                        } catch (e) {
                            console.error('Toggle done failed', e);
                        }
                        await loadAndRender();
                    });
                });
    }

    async function fetchIndex(){
        try {
            const res = await fetch('/api/items.json');
            if (!res.ok) throw new Error('Failed to load item index');
            const data = await res.json();
            const idx: Record<string, any> = {};
            (data.items || []).forEach((it: any) => {
                idx[`${it.type}:${it.id}`] = it;
                (it.altIds || []).forEach((aid: string) => { idx[`${it.type}:${aid}`] = it; });
            });
            indexByKey = idx;
        } catch (e) {
            console.warn('Item index load failed', e);
            indexByKey = {};
        }
    }

    async function loadAndRender(){
        try {
            // Ensure auth first
            const user = await getCurrentUser();
            if (!user) return; // redirect already handled earlier
            await fetchIndex();
            const counts = await getSavedCounts();
            if (listsCount) listsCount.textContent = String(counts.lists);
            if (savedCount) savedCount.textContent = String(counts.items);
            // Completed count
            try {
                const c = await getCompletedCount();
                if (completedCountEl) completedCountEl.textContent = String(c);
            } catch {}
            // Recent completed
            try {
                const rec = await getRecentCompleted(6);
                if (rec && rec.length && recentCompletedBox && recentCompletedEl) {
                    recentCompletedBox.hidden = false;
                    recentCompletedEl.innerHTML = '';
                    const rf = document.createDocumentFragment();
                    rec.forEach((r: any) => {
                        const mk = `${r.item_type}:${r.item_id}`;
                        const meta = indexByKey[mk] || {};
                        const url = meta?.url || (r.item_type === 'project' ? `/projects/${r.item_id}` : `/stays/${r.item_id}`);
                        const card = document.createElement('a');
                        card.href = url;
                        card.className = 'flex items-center gap-3 p-3 bg-white rounded-lg border hover:border-gray-300';
                        card.innerHTML = `
                            ${meta?.image ? `<img src="${meta.image}" alt="" class="w-12 h-12 rounded object-cover"/>` :
                            `<div class="w-12 h-12 rounded bg-gray-100 flex items-center justify-center text-xs text-gray-500">${r.item_type}</div>`}
                            <div class="min-w-0">
                                <div class="font-medium truncate">${meta?.title || `${r.item_type} ${r.item_id}`}</div>
                                <div class="text-xs text-gray-500">Completed ${new Date(r.completed_at).toLocaleDateString?.() || ''}</div>
                            </div>
                        `;
                        rf.appendChild(card);
                    });
                    recentCompletedEl.appendChild(rf);
                    // Collapse state (hidden by default)
                    const lsKey = 'dashRecentCollapsed';
                    let collapsed = true;
                    try {
                        const v = localStorage.getItem(lsKey);
                        collapsed = v === null ? true : v === '1';
                    } catch {}
                    const apply = (isCollapsed: boolean) => {
                        const icon = recentCompletedToggle?.querySelector('svg');
                        if (isCollapsed) {
                            recentCompletedContent?.classList.add('hidden');
                            (recentCompletedToggle as HTMLButtonElement)?.setAttribute('aria-expanded', 'false');
                            (recentCompletedToggle as HTMLButtonElement)?.setAttribute('aria-label', 'Expand section');
                            icon?.classList.add('rotate-180');
                        } else {
                            recentCompletedContent?.classList.remove('hidden');
                            (recentCompletedToggle as HTMLButtonElement)?.setAttribute('aria-expanded', 'true');
                            (recentCompletedToggle as HTMLButtonElement)?.setAttribute('aria-label', 'Collapse section');
                            icon?.classList.remove('rotate-180');
                        }
                    };
                    apply(collapsed);
                    if (recentCompletedToggle) {
                        (recentCompletedToggle as HTMLButtonElement).onclick = () => {
                            collapsed = !collapsed;
                            try { localStorage.setItem(lsKey, collapsed ? '1' : '0'); } catch {}
                            apply(collapsed);
                        };
                    }
                    if (recentCompletedTitle) {
                        recentCompletedTitle.setAttribute('tabindex', '0');
                        recentCompletedTitle.addEventListener('click', () => {
                            collapsed = !collapsed;
                            try { localStorage.setItem(lsKey, collapsed ? '1' : '0'); } catch {}
                            apply(collapsed);
                        });
                        recentCompletedTitle.addEventListener('keydown', (e: KeyboardEvent) => {
                            if (e.key === 'Enter' || e.key === ' ') {
                                e.preventDefault();
                                collapsed = !collapsed;
                                try { localStorage.setItem(lsKey, collapsed ? '1' : '0'); } catch {}
                                apply(collapsed);
                            }
                        });
                    }
                } else if (recentCompletedBox) {
                    recentCompletedBox.hidden = true;
                }
            } catch {}
            // Lists and completed statuses
            lists = await getListsWithItems();
            const pairs: any[] = [];
            lists.forEach((l: any) => (l.items || []).forEach((it: any) => { pairs.push({ item_type: it.item_type, item_id: String(it.item_id) }); }));
            try { statusByKey = await getStatusesForItems(pairs); } catch { statusByKey = {}; }
            renderLists();
        } catch (e) {
            console.error('Failed loading lists', e);
        }
    }

    function openNewListModal(){
        if (!newListModal) return;
        lastFocusedBeforeModal = (document.activeElement as HTMLElement) || null;
        newListModal.classList.remove('hidden');
        // autofocus after paint
        setTimeout(() => { newListNameInput?.focus(); }, 0);
        modalKeydownHandler = (e: KeyboardEvent) => {
            if (e.key === 'Escape') {
                e.preventDefault();
                closeNewListModal();
            }
        };
        window.addEventListener('keydown', modalKeydownHandler);
    }

    function closeNewListModal(){
        if (!newListModal) return;
        newListModal.classList.add('hidden');
        if (newListNameInput) newListNameInput.value = '';
        if (modalKeydownHandler) {
            window.removeEventListener('keydown', modalKeydownHandler);
            modalKeydownHandler = null;
        }
        if (lastFocusedBeforeModal) {
            try { lastFocusedBeforeModal.focus(); } catch {}
            lastFocusedBeforeModal = null;
        }
    }

    async function handleCreateNewList(){
        try {
            let name = (newListNameInput?.value || '').trim();
            if (!name) name = 'New list'; // quick-add default
            const created = await createList(name, null, false);
            closeNewListModal();
            await loadAndRender();
            // Expand and scroll to the new list
            try {
                try { localStorage.setItem(`dashListCollapsed:${created.id}`, '0'); } catch {}
                const listEl = document.querySelector(`[data-list-id="${created.id}"]`);
                if (listEl) {
                    const container = listEl.querySelector('[data-items]');
                    if (container && container.classList.contains('hidden')) {
                        container.classList.remove('hidden');
                    }
                    listEl.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            } catch {}
        } catch (err) {
            console.error('Create list failed', err);
        }
    }

    if (createListBtn) createListBtn.addEventListener('click', openNewListModal);
    if (newListOverlay) newListOverlay.addEventListener('click', closeNewListModal);
    if (newListCancelBtn) newListCancelBtn.addEventListener('click', (e) => { e.preventDefault(); closeNewListModal(); });
    if (newListCreateBtn) newListCreateBtn.addEventListener('click', (e) => { e.preventDefault(); handleCreateNewList(); });
    if (newListNameInput) newListNameInput.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleCreateNewList();
        } else if (e.key === 'Escape') {
            e.preventDefault();
            closeNewListModal();
        }
    });

    const onToggleHideDone = () => {
        hideCompleted = !hideCompleted;
        try { localStorage.setItem(HIDE_COMPLETED_LS, hideCompleted ? '1' : '0'); } catch(_) {}
        applyHideDoneVisual();
        renderLists();
    };
    if (hideDoneChip) hideDoneChip.addEventListener('click', onToggleHideDone);
    if (hideDoneChipMobile) hideDoneChipMobile.addEventListener('click', onToggleHideDone);

    // Initial load
    loadAndRender();
</script>
