---
import MainLayout from '../../layouts/MainLayout.astro';
---

<MainLayout title="Dashboard">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="p-6"> <!-- flattened container: removed border/background/shadow -->
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-4">
                <div class="flex items-center gap-4">
                    <div class="rounded-full overflow-hidden w-12 h-12 bg-gray-100 flex items-center justify-center">
                        <!-- avatar populated by JS -->
                        <img id="userAvatar" alt="avatar" class="w-full h-full object-cover hidden" />
                        <svg id="userAvatarPlaceholder" class="w-6 h-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11c1.657 0 3-1.343 3-3S17.657 5 16 5s-3 1.343-3 3 1.343 3 3 3zM4 21v-1a4 4 0 014-4h8a4 4 0 014 4v1" />
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-2xl font-semibold" id="dashTitle">Dashboard</h1>
                        <a id="dashSubtitle" href="/auth/profile" class="text-sm text-gray-500 hover:underline">Edit your profile</a>
                    </div>
                </div>

                <div class="flex items-center gap-3">
                    <button id="logoutBtn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 cursor-pointer">Logout</button>
                </div>
            </div>
            <div class="mb-6">
                <div class="p-4 bg-gray-50 rounded-lg">
                    <!-- Stats row -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div class="p-4 bg-white rounded-lg flex items-center justify-between">
                            <div>
                                <p class="text-sm text-gray-500">Saved items</p>
                                <div class="mt-2 text-2xl font-bold" id="savedCount">—</div>
                            </div>
                            <div class="text-sm text-gray-400">Projects & Stays</div>
                        </div>

                        <div class="p-4 bg-white rounded-lg flex items-center justify-between">
                            <div>
                                <p class="text-sm text-gray-500">Lists</p>
                                <div class="mt-2 text-2xl font-bold" id="listsCount">—</div>
                            </div>
                            <div class="text-sm text-gray-400">Custom collections</div>
                        </div>
                    </div>

                    <!-- My Lists section -->
                    <div class="mt-6">
                        <div class="flex items-center justify-between mb-3">
                            <div>
                                <h3 class="text-lg font-semibold">My Lists</h3>
                                <p class="text-sm text-gray-500">Create lists to save projects and stays for later.</p>
                            </div>
                            <div class="flex items-center gap-2">
                                <button id="createListBtn" class="px-3 py-2 bg-primary-600 text-white rounded-md cursor-pointer">Create new list</button>
                            </div>
                        </div>

                        <!-- Create form (hidden by default) -->
                        <div id="newListForm" class="hidden mb-4">
                            <div class="flex gap-2">
                                <input id="newListName" type="text" placeholder="List name" class="flex-1 px-3 py-2 border rounded-md" />
                                <button id="addListBtn" class="px-3 py-2 bg-green-600 text-white rounded-md cursor-pointer">Add</button>
                                <button id="cancelListBtn" class="px-3 py-2 bg-gray-200 rounded-md cursor-pointer">Cancel</button>
                            </div>
                        </div>

                        <!-- Lists placeholder -->
                        <div id="listsContainer" class="space-y-3">
                            <div class="p-4 bg-white rounded-lg border border-dashed border-gray-200 text-sm text-gray-500">You don't have any lists yet. Create one to get started.</div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="userInfo" class="prose prose-sm text-sm text-gray-700">
                Loading...
            </div>
        </div>
    </div>
</MainLayout>

<script>
    import { getCurrentUser, logout } from '../../lib/auth';
    import { getListsWithItems, getSavedCounts, createList, removeItemFromList, deleteList } from '../../lib/lists';

    // Check if user is logged in
    const checkAuth = async () => {
        const user = await getCurrentUser();
            console.debug('Dashboard auth check user:', user);
            if (!user) {
                console.debug('No user found - redirecting to login');
                window.location.href = '/auth/login';
                return;
            }

        const userInfo = document.getElementById('userInfo');
        if (userInfo) {
            // populate profile summary and header greeting
            const dashSubtitle = document.getElementById('dashSubtitle');
            const dashTitle = document.getElementById('dashTitle');

            // Title: personalise when we have a name
            if (dashTitle) dashTitle.textContent = user.name ? `Hi, ${user.name}` : 'Dashboard';

            // Subtitle: ensure it links to profile (markup already set)
            if (dashSubtitle) dashSubtitle.textContent = 'Edit profile';

            // Fill userInfo with useful summary and a profile action
            userInfo.innerHTML = `
                <div class="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
                    <div>
                        <p class="text-sm text-gray-500">Signed in as</p>
                        <p class="text-base font-medium text-gray-900">${user.name || user.email || 'Member'}</p>
                        <p class="text-sm text-gray-500">${user.email || ''}</p>
                    </div>
                    <div class="flex items-center gap-2">
                        <a href="/auth/profile" class="px-3 py-2 bg-primary-600 text-white rounded-md cursor-pointer">Edit profile</a>
                    </div>
                </div>
            `;

            // Edit moved to the dedicated profile page; no inline edit here.

            // Danger zone moved to profile page; no delete handlers here.
        }
    };

    // Handle logout
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', async () => {
            try {
                await logout();
                window.location.href = '/auth/login';
            } catch (error) {
                console.error('Logout failed:', error);
            }
        });
    }

    // (profile and delete handlers attached after DOM is populated in checkAuth)

    // Check auth on page load
    checkAuth();

    // --- Client-side lists UI (real data) ---
    const createListBtn = document.getElementById('createListBtn');
    const newListForm = document.getElementById('newListForm');
    const cancelListBtn = document.getElementById('cancelListBtn');
    const addListBtn = document.getElementById('addListBtn');
    const newListName = document.getElementById('newListName');
    const listsContainer = document.getElementById('listsContainer');
    const listsCount = document.getElementById('listsCount');
    const savedCount = document.getElementById('savedCount');

    // State
    let lists = [] as any[];
    let indexByKey: Record<string, any> = {};

    function idKeysFor(type: 'project' | 'stay', id: string){ return [`${type}:${id}`]; }

    function renderLists(){
        if (!listsContainer) return;
        if (!lists || lists.length === 0){
            listsContainer.innerHTML = '<div class="p-4 bg-white rounded-lg border border-dashed border-gray-200 text-sm text-gray-500">You don\'t have any lists yet. Create one to get started.</div>';
            if (listsCount) listsCount.textContent = '0';
            if (savedCount) savedCount.textContent = '0';
            return;
        }
        listsContainer.innerHTML = '';
        let totalItems = 0;
        lists.forEach(l => { totalItems += (l.items?.length || 0); });
        if (listsCount) listsCount.textContent = String(lists.length);
        if (savedCount) savedCount.textContent = String(totalItems);

        const frag = document.createDocumentFragment();
                lists.forEach(l => {
            const wrap = document.createElement('div');
                        wrap.className = 'p-4 bg-white rounded-lg';
            const count = l.items?.length || 0;
        const lsKey = `dashListCollapsed:${l.id}`;
        const initialCollapsed = typeof localStorage !== 'undefined' && localStorage.getItem(lsKey) === '1';
                        wrap.innerHTML = `
                <div class="flex items-center justify-between">
                    <div>
                                                <div class="font-medium cursor-pointer" data-list-title>${l.title}${l.is_default ? ' <span class="text-xs text-gray-500">(default)</span>' : ''}</div>
                        <div class="text-sm text-gray-500">${count} item${count===1?'':'s'}</div>
                    </div>
                    <div class="flex items-center gap-2">
                                                                        <button data-toggle-list="${l.id}" aria-expanded="${initialCollapsed ? 'false' : 'true'}" aria-label="${initialCollapsed ? 'Expand list' : 'Collapse list'}" class="p-1 text-gray-600 hover:text-gray-800 rounded cursor-pointer">
                                                    <svg class="w-4 h-4 transition-transform ${initialCollapsed ? 'rotate-180' : ''}" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.25a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd" />
                                                    </svg>
                                                </button>
                                                                                                <button data-delete-list="${l.id}" aria-label="Delete list" title="Delete list" class="p-1 text-red-600 hover:text-red-800 rounded hover:bg-red-50 cursor-pointer">
                                                                                                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                                                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z"/>
                                                                                                    </svg>
                                                                        </button>
                    </div>
                </div>
        <div class="mt-3 space-y-2 ${initialCollapsed ? 'hidden' : ''}" data-items></div>
            `;
            const itemsHost = wrap.querySelector('[data-items]');
                        (l.items || []).forEach((item: any) => {
                const meta = indexByKey[`${item.item_type}:${item.item_id}`] || null;
                const title = meta?.title || `${item.item_type} ${item.item_id}`;
                const url = meta?.url || (item.item_type === 'project' ? `/projects/${item.item_id}` : `/stays/${item.item_id}`);
                const row = document.createElement('div');
                row.className = 'flex items-center justify-between border rounded-md px-3 py-2';
                row.innerHTML = `
                    <div class="flex items-center gap-3">
                        ${meta?.image ? `<img src="${meta.image}" alt="" class="w-10 h-10 rounded object-cover"/>` :
                        `<div class="w-10 h-10 rounded bg-gray-100 flex items-center justify-center text-xs text-gray-500">${item.item_type}</div>`}
                        <a class="font-medium hover:underline" href="${url}">${title}</a>
                    </div>
                                        <div class="flex items-center gap-3">
                                            <span class="text-xs text-gray-400">${new Date(item.added_at).toLocaleDateString?.() || ''}</span>
                                            <button data-remove-item data-list="${l.id}" data-type="${item.item_type}" data-id="${item.item_id}" class="px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded hover:bg-gray-200 cursor-pointer">Remove</button>
                                        </div>
                `;
                itemsHost?.appendChild(row);
            });
                        // bind delete list
                        const delBtn = wrap.querySelector('button[data-delete-list]');
                        if (delBtn) {
                            delBtn.addEventListener('click', async () => {
                                const id = (delBtn as HTMLButtonElement).getAttribute('data-delete-list');
                                if (!id) return;
                                const ok = window.confirm('Delete this list? All items in it will also be removed. This cannot be undone.');
                                if (!ok) return;
                                try {
                                    await deleteList(id);
                                    await loadAndRender();
                                } catch (e) {
                                    console.error('Delete list failed', e);
                                }
                            });
                        }

                        // bind collapse/expand toggle
                        const toggleBtn = wrap.querySelector('button[data-toggle-list]');
                        const titleEl = wrap.querySelector('[data-list-title]');
                        const doToggle = () => {
                            const isHidden = itemsHost?.classList.contains('hidden');
                            const icon = toggleBtn?.querySelector('svg');
                            if (isHidden) {
                                itemsHost?.classList.remove('hidden');
                                (toggleBtn as HTMLButtonElement)?.setAttribute('aria-expanded', 'true');
                                (toggleBtn as HTMLButtonElement)?.setAttribute('aria-label', 'Collapse list');
                                icon?.classList.remove('rotate-180');
                                try { localStorage.setItem(lsKey, '0'); } catch(_) {}
                            } else {
                                itemsHost?.classList.add('hidden');
                                (toggleBtn as HTMLButtonElement)?.setAttribute('aria-expanded', 'false');
                                (toggleBtn as HTMLButtonElement)?.setAttribute('aria-label', 'Expand list');
                                icon?.classList.add('rotate-180');
                                try { localStorage.setItem(lsKey, '1'); } catch(_) {}
                            }
                        };
                        if (toggleBtn) {
                            toggleBtn.addEventListener('click', doToggle);
                        }
                        if (titleEl) {
                            titleEl.addEventListener('click', doToggle);
                        }
            frag.appendChild(wrap);
        });
        listsContainer.appendChild(frag);

                // delegate remove buttons
                listsContainer.querySelectorAll('button[data-remove-item]').forEach((btn) => {
                    btn.addEventListener('click', async () => {
                        const listId = (btn as HTMLButtonElement).getAttribute('data-list');
                        const type = (btn as HTMLButtonElement).getAttribute('data-type') as 'project' | 'stay' | null;
                        const id = (btn as HTMLButtonElement).getAttribute('data-id');
                        if (!listId || !type || !id) return;
                        const ok = window.confirm('Remove this item from the list?');
                        if (!ok) return;
                        try {
                            await removeItemFromList(listId, type, id);
                            await loadAndRender();
                        } catch (e) {
                            console.error('Remove item failed', e);
                        }
                    });
                });
    }

    async function fetchIndex(){
        try {
            const res = await fetch('/api/items.json');
            if (!res.ok) throw new Error('Failed to load item index');
            const data = await res.json();
            const idx: Record<string, any> = {};
            (data.items || []).forEach((it: any) => {
                idx[`${it.type}:${it.id}`] = it;
                (it.altIds || []).forEach((aid: string) => { idx[`${it.type}:${aid}`] = it; });
            });
            indexByKey = idx;
        } catch (e) {
            console.warn('Item index load failed', e);
            indexByKey = {};
        }
    }

    async function loadAndRender(){
        try {
            // Ensure auth first
            const user = await getCurrentUser();
            if (!user) return; // redirect already handled earlier
            const counts = await getSavedCounts();
            if (listsCount) listsCount.textContent = String(counts.lists);
            if (savedCount) savedCount.textContent = String(counts.items);
            await fetchIndex();
            lists = await getListsWithItems();
            renderLists();
        } catch (e) {
            console.error('Failed loading lists', e);
        }
    }

    if (createListBtn) {
        createListBtn.addEventListener('click', () => {
            newListForm?.classList.remove('hidden');
            (newListName as HTMLInputElement)?.focus();
        });
    }

    if (cancelListBtn) {
        cancelListBtn.addEventListener('click', () => {
            newListForm?.classList.add('hidden');
            (newListName as HTMLInputElement).value = '';
        });
    }

    if (addListBtn) {
        addListBtn.addEventListener('click', async (e) => {
            e.preventDefault();
            const name = (newListName as HTMLInputElement).value.trim();
            if (!name) return;
            try {
                await createList(name, null, false);
                (newListName as HTMLInputElement).value = '';
                newListForm?.classList.add('hidden');
                await loadAndRender();
            } catch (err) {
                console.error('Create list failed', err);
            }
        });
    }

    // Initial load
    loadAndRender();
</script>
