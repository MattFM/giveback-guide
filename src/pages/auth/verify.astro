---
import MainLayout from '../../layouts/MainLayout.astro';
---

<MainLayout title="Verifying...">
    <div class="max-w-md mx-auto mt-8 p-6 bg-white rounded-lg shadow-md">
        <div id="status" class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
            <p>Verifying your login...</p>
        </div>
    </div>
</MainLayout>

<script>
    import { account } from '../../lib/appwrite';

    const updateStatus = (message: string, isError = false) => {
        const statusDiv = document.getElementById('status');
        if (statusDiv) {
            statusDiv.innerHTML = `<p class="${isError ? 'text-red-500' : ''}">${message}</p>`;
        }
    };

    // Get URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const userId = urlParams.get('userId');
    const secret = urlParams.get('secret');

    if (userId && secret) {
        try {
            // Prefer a dynamic call in case SDK surface differs between versions
            const accAny = account as any;
            const methodExists = typeof accAny.updateMagicURLSession === 'function';
            if (!methodExists) {
                // Try alternative method names or fail early with diagnostics
                throw new Error('Appwrite SDK does not expose updateMagicURLSession on account object');
            }

            // Update the Magic URL session
            await accAny.updateMagicURLSession(userId, secret);
            updateStatus('Login successful! Redirecting...');

            // Diagnostics: fetch the account/user object and log it so we can
            // inspect which user was actually authenticated after the magic link.
            try {
                const freshUser = await account.get();
                console.debug('Post-verify current user:', freshUser);
            } catch (e) {
                console.debug('Failed to fetch current user after verify', e);
            }
            // After verifying, send user to onboarding. The onboarding page will
            // decide whether the user still needs to complete profile/preferences
            // or can be forwarded to the dashboard.
            window.location.href = '/auth/onboarding';
        } catch (error) {
            // Detailed diagnostics for debugging magic link problems
            console.error('Magic link verification error:', error);
            const diagnostics = [];
            diagnostics.push(`userId=${userId}`);
            diagnostics.push(`secret=${secret ? '[present]' : '[missing]'}`);
            try {
                const accProto = Object.getPrototypeOf(account) || {};
                const protoNames = Object.getOwnPropertyNames(accProto).filter(Boolean).join(', ');
                diagnostics.push(`account proto methods: ${protoNames}`);
            } catch (e) {
                diagnostics.push('account proto inspection failed');
            }

            updateStatus(`Invalid or expired magic link. ${((error as any)?.message) || ''}`.trim(), true);
            // Also append a brief debug note to the console (do not expose sensitive secrets in UI)
            console.debug('Magic link diagnostics:', diagnostics.join(' | '));

            setTimeout(() => {
                window.location.href = '/auth/login';
            }, 3000);
        }
    } else {
        updateStatus('Invalid magic link. Please try again.', true);
        setTimeout(() => {
            window.location.href = '/auth/login';
        }, 3000);
    }
</script>
