---
export const prerender = false;

import MainLayout from "../layouts/MainLayout.astro";
import ProjectCard from "../components/ProjectCard.astro";

const query = Astro.url.searchParams.get("q") || ""; // Get the search query from the URL
---

<MainLayout title="Search Results">
    <section class="bg-white dark:bg-gray-900">
      <div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-6">
        <h1 class="mb-4 text-4xl font-extrabold text-gray-900 dark:text-white">
          Search Results for {query}
        </h1>
        <p id="results-count" class="mb-4 text-gray-500 dark:text-gray-400">
          Loading results...
        </p>
        <form id="search-form" class="mb-8 flex gap-2">
          <input
            type="text"
            id="search-input"
            name="q"
            value={query}
            placeholder="Search..."
            class="w-full p-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-700 dark:text-white"
          />
          <button
            type="submit"
            class="px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700"
          >
            Search
          </button>
        </form>
  
        <div id="results" class="grid gap-8 lg:grid-cols-3">
          <p id="loading-text">Loading search results...</p>
        </div>
  
        <div id="load-more-container" class="flex justify-center mt-8">
          <button
            id="load-more"
            class="hidden px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700"
          >
            Load More Results
          </button>
        </div>
      </div>
    </section>
  </MainLayout>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
      const query = new URLSearchParams(window.location.search).get("q") || ""; // Get the search query from the URL
      if (!query) return;
  
      console.log("Search query:", query); // Debugging query
  
      try {
        // Dynamically import the Pagefind API
        const pagefindPath = import.meta.env.DEV
          ? "/pagefind/pagefind.js" // Development path
          : "/pagefind/pagefind.js"; // Production path
  
        console.log("Attempting to load Pagefind from:", pagefindPath);
        const pagefind = await import(pagefindPath);
        console.log("Pagefind loaded:", pagefind);
  
        // Initialize Pagefind
        await pagefind.init();
        console.log("Pagefind initialized"); // Debugging initialization
  
        // Perform the search
        const searchResults = await pagefind.search(query);
        console.log("Search results:", searchResults); // Debugging results
  
        // Pagination logic
        let currentPage = 1;
        const pageSize = 9;
  
        type SearchResult = {
          id: string;
          data: () => Promise<{
            url: string;
            meta?: {
              title?: string;
              collection?: string;
              image?: string; // Assuming 'image' is part of the metadata
            };
            excerpt?: string;
          }>;
        };
  
        const renderResults = async (page: number) => {
          const start = (page - 1) * pageSize;
          const end = page * pageSize;
  
          // Fetch only the results for the current page
          const paginatedResults = await Promise.all(
            searchResults.results.slice(start, end).map(async (result: SearchResult) => {
              const data = await result.data();
              return {
                id: result.id,
                url: data.url,
                title: data.meta?.title || "Untitled",
                excerpt: data.excerpt || "",
                image: data.meta?.image || "/placeholder-image.jpg", // Fallback image
                collection: data.meta?.collection || "unknown", // Assuming 'collection' is a meta field
              };
            })
          );
  
          console.log("Paginated results:", paginatedResults); // Debugging paginated results
  
          const resultsContainer = document.getElementById("results");
          const loadingText = document.getElementById("loading-text");
  
          // Remove "Loading search results..." text
          if (loadingText) {
            loadingText.remove();
          }
  
          if (resultsContainer) {
            resultsContainer.innerHTML += paginatedResults
              .map(
                (result) => `
                <article class="bg-white overflow-hidden">
                  <div class="relative">
                    <a href="${result.url}">
                      <img
                        class="w-full h-64 rounded-lg object-cover"
                        src="${result.image}"
                        alt="${result.title}"
                      />
                    </a>
                  </div>
                  <div class="pt-4">
                    <h3 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white px-4">
                      <a href="${result.url}" class="hover:underline">${result.title}</a>
                    </h3>
                  </div>
                </article>
              `
              )
              .join("");
          }

          // After fetching search results
const resultsCount = document.getElementById("results-count");
if (resultsCount) {
  resultsCount.textContent = `${searchResults.results.length} result${
    searchResults.results.length !== 1 ? "s" : ""
  } found`;
}
  
          // Show or hide the "Load More" button
          const loadMoreButton = document.getElementById("load-more");
          if (end >= searchResults.results.length) {
            if (loadMoreButton) {
              loadMoreButton.classList.add("hidden");
            }
          } else {
            if (loadMoreButton) {
              loadMoreButton.classList.remove("hidden");
            }
          }
        };
  
        // Initial render
        await renderResults(currentPage);
  
        // Handle "Load More" button click
        const loadMoreButton = document.getElementById("load-more");
        if (loadMoreButton) {
          loadMoreButton.addEventListener("click", async () => {
            currentPage++;
            await renderResults(currentPage);
          });
        }
  
        // Handle search form submission
        const searchForm = document.getElementById("search-form");
        if (searchForm) {
          searchForm.addEventListener("submit", (e) => {
            e.preventDefault();
            const searchInput = document.getElementById("search-input");
            const newQuery = searchInput ? (searchInput as HTMLInputElement).value : "";
            window.location.href = `/search?q=${encodeURIComponent(newQuery)}`;
          });
        }
      } catch (error) {
        console.error("Search error:", error); // Debugging errors
      }
    });
  </script>